.. _parameters:

************************
Parameter tree structure
************************
 
.. note::
   This section needs to be reworked to account for the
   recursive nature for |ptypy|_'s parameter tree. 
   Please use the examples in the templates folder to 
   craft your own scripts.

io
==

.. py:data:: io (Param)

   

   

   *default* = ``Param({})``


io.interaction
--------------

.. py:data:: io.interaction (Param)

   

   

   *default* = ``Param({})``

.. py:data:: io.interaction.server (Param)

   

   

   *default* = ``Param({})``

.. py:data:: io.interaction.server.active (bool)

   Activation switch

   Set to ``False`` for no  ZeroMQ interaction server

   *default* = ``True``

.. py:data:: io.interaction.server.address (str)

   The address the server is listening to.

   Wenn running ptypy on a remote server, it is the servers network address.

   *default* = ``'tcp://127.0.0.1'``

.. py:data:: io.interaction.server.port (int)

   The port the server is listening to.

   Make sure to pick an unused port with a few unused ports close to it.

   *default* = ``5560``

.. py:data:: io.interaction.server.connections (int)

   Number of concurrent connections on the server

   A range ``[port : port+connections]`` of ports adjacent :py:data:`~.io.interaction.port`
   will be opened on demand for connecting clients.

   *default* = ``10``

.. py:data:: io.interaction.server.poll_timeout (float)

   Network polling interval

   Network polling interval, in milliseconds.

   *default* = ``10.0``

.. py:data:: io.interaction.server.pinginterval (float)

   Interval to check pings

   Interval with which to check pings, in seconds.

   *default* = ``2``

.. py:data:: io.interaction.server.pingtimeout (float)

   Ping time out

   Ping time out: client disconnected after this period, in seconds.

   *default* = ``10``

.. py:data:: io.interaction.client (Param)

   

   

   *default* = ``Param({})``

.. py:data:: io.interaction.client.address (str)

   The address the server is listening to.

   Wenn running ptypy on a remote server, it is the servers network address.

   *default* = ``'tcp://127.0.0.1'``

.. py:data:: io.interaction.client.port (int)

   The port the server is listening to.

   Make sure to pick an unused port with a few unused ports close to it.

   *default* = ``5560``

.. py:data:: io.interaction.client.poll_timeout (float)

   Network polling interval

   Network polling interval, in milliseconds.

   *default* = ``100.0``

.. py:data:: io.interaction.client.pinginterval (float)

   Interval to check pings

   Interval with which to check pings, in seconds.

   *default* = ``1``

.. py:data:: io.interaction.client.connection_timeout (float)

   Timeout for dead server

   Timeout for dead server, in milliseconds.

   *default* = ``3600000.0``


scandata
========

.. py:data:: scandata (Param)

   

   

   *default* = ``Param({})``


scandata.PtyScan
----------------

.. py:data:: scandata.PtyScan (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scandata.PtyScan.name (str)

   

   

   *default* = ``'PtyScan'``

.. py:data:: scandata.PtyScan.dfile (str)

   File path where prepared data will be saved in the ``ptyd`` format.

   

   *default* = ``None``

.. py:data:: scandata.PtyScan.chunk_format (str)

   Appendix to saved files if save == 'link'

   

   *default* = ``'.chunk%02d'``

.. py:data:: scandata.PtyScan.save (str)

   Saving mode

   Mode to use to save data to file.
   
   
   - ``None``: No saving
   - ``'merge'``: attemts to merge data in single chunk **[not implemented]**
   - ``'append'``: appends each chunk in master \*.ptyd file
   - ``'link'``: appends external links in master \*.ptyd file and stores chunks separately
   
   
   in the path given by the link. Links file paths are relative to master file.

   *default* = ``None``

.. py:data:: scandata.PtyScan.auto_center (bool)

   Determine if center in data is calculated automatically

   
   - ``False``, no automatic centering
   - ``None``, only if :py:data:`center` is ``None``
   - ``True``, it will be enforced

   *default* = ``None``

.. py:data:: scandata.PtyScan.load_parallel (str)

   Determines what will be loaded in parallel

   Choose from ``None``, ``'data'``, ``'common'``, ``'all'``

   *default* = ``'data'``

.. py:data:: scandata.PtyScan.rebin (int)

   Rebinning factor

   Rebinning factor for the raw data frames. ``'None'`` or ``1`` both mean *no binning*

   *default* = ``None (>1, <32)``

.. py:data:: scandata.PtyScan.orientation (int, tuple, list)

   Data frame orientation

   Choose
   
   
   - ``None`` or ``0``: correct orientation
   - ``1``: invert columns (numpy.flip_lr)
   - ``2``: invert rows  (numpy.flip_ud)
   - ``3``: invert columns, invert rows
   - ``4``: transpose (numpy.transpose)
   - ``4+i``: tranpose + other operations from above
   
   
   Alternatively, a 3-tuple of booleans may be provided ``(do_transpose,
   do_flipud, do_fliplr)``

   *default* = ``None``

.. py:data:: scandata.PtyScan.min_frames (int)

   Minimum number of frames loaded by each node

   

   *default* = ``1 (>1)``

.. py:data:: scandata.PtyScan.positions_theory (ndarray)

   Theoretical positions for this scan

   If provided, experimental positions from :py:class:`PtyScan` subclass will be ignored. If data
   preparation is called from Ptycho instance, the calculated positions from the
   :py:func:`ptypy.core.xy.from_pars` dict will be inserted here

   *default* = ``None``

.. py:data:: scandata.PtyScan.num_frames (int)

   Maximum number of frames to be prepared

   If `positions_theory` are provided, num_frames will be ovverriden with the number of
   positions available

   *default* = ``None``

.. py:data:: scandata.PtyScan.label (str)

   The scan label

   Unique string identifying the scan

   *default* = ``None``

.. py:data:: scandata.PtyScan.experimentID (str)

   Name of the experiment

   If None, a default value will be provided by the recipe. **unused**

   *default* = ``None``

.. py:data:: scandata.PtyScan.version (float)

   TODO: Explain this and decide if it is a user parameter.

   

   *default* = ``0.1``

.. py:data:: scandata.PtyScan.shape (int, tuple)

   Shape of the region of interest cropped from the raw data.

   Cropping dimension of the diffraction frame
   Can be None, (dimx, dimy), or dim. In the latter case shape will be (dim, dim).

   *default* = ``256``

.. py:data:: scandata.PtyScan.center (list, tuple, str)

   Center (pixel) of the optical axes in raw data

   If ``None``, this parameter will be set by :py:data:`~.scan.data.auto_center` or elsewhere

   *default* = ``'fftshift'``

.. py:data:: scandata.PtyScan.psize (float, tuple)

   Detector pixel size

   Dimensions of the detector pixels (in meters)

   *default* = ``0.000172 (>0.0)``

.. py:data:: scandata.PtyScan.distance (float)

   Sample to detector distance

   In meters.

   *default* = ``7.19 (>0.0)``

.. py:data:: scandata.PtyScan.energy (float)

   Photon energy of the incident radiation in keV

   

   *default* = ``7.2 (>0.0)``

.. py:data:: scandata.PtyScan.add_poisson_noise (bool)

   Decides whether the scan should have poisson noise or not

   

   *default* = ``False``


scandata.PtydScan
-----------------

.. py:data:: scandata.PtydScan (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scandata.PtydScan.name (str)

   

   

   *default* = ``'PtydScan'``

.. py:data:: scandata.PtydScan.dfile (str)

   Prepared data file path

   If source is ``None`` or ``'file'``, data will be loaded from this file and processing as
   well as saving is deactivated. If source is the path to a file, data will be saved to this file.

   *default* = ``None``

.. py:data:: scandata.PtydScan.chunk_format (str)

   Appendix to saved files if save == 'link'

   

   *default* = ``'.chunk%02d'``

.. py:data:: scandata.PtydScan.save (str)

   Saving mode

   Mode to use to save data to file.
   
   
   - ``None``: No saving
   - ``'merge'``: attemts to merge data in single chunk **[not implemented]**
   - ``'append'``: appends each chunk in master \*.ptyd file
   - ``'link'``: appends external links in master \*.ptyd file and stores chunks separately
   
   
   in the path given by the link. Links file paths are relative to master file.

   *default* = ``None``

.. py:data:: scandata.PtydScan.auto_center (bool)

   Determine if center in data is calculated automatically

   
   - ``False``, no automatic centering
   - ``None``, only if :py:data:`center` is ``None``
   - ``True``, it will be enforced

   *default* = ``None``

.. py:data:: scandata.PtydScan.load_parallel (str)

   Determines what will be loaded in parallel

   Choose from ``None``, ``'data'``, ``'common'``, ``'all'``

   *default* = ``'data'``

.. py:data:: scandata.PtydScan.rebin (int)

   Rebinning factor

   Rebinning factor for the raw data frames. ``'None'`` or ``1`` both mean *no binning*

   *default* = ``None (>1, <32)``

.. py:data:: scandata.PtydScan.orientation (int, tuple, list)

   Data frame orientation

   Choose
   
   
   - ``None`` or ``0``: correct orientation
   - ``1``: invert columns (numpy.flip_lr)
   - ``2``: invert rows  (numpy.flip_ud)
   - ``3``: invert columns, invert rows
   - ``4``: transpose (numpy.transpose)
   - ``4+i``: tranpose + other operations from above
   
   
   Alternatively, a 3-tuple of booleans may be provided ``(do_transpose,
   do_flipud, do_fliplr)``

   *default* = ``None``

.. py:data:: scandata.PtydScan.min_frames (int)

   Minimum number of frames loaded by each node

   

   *default* = ``1 (>1)``

.. py:data:: scandata.PtydScan.positions_theory (ndarray)

   Theoretical positions for this scan

   If provided, experimental positions from :py:class:`PtyScan` subclass will be ignored. If data
   preparation is called from Ptycho instance, the calculated positions from the
   :py:func:`ptypy.core.xy.from_pars` dict will be inserted here

   *default* = ``None``

.. py:data:: scandata.PtydScan.num_frames (int)

   Maximum number of frames to be prepared

   If `positions_theory` are provided, num_frames will be ovverriden with the number of
   positions available

   *default* = ``None``

.. py:data:: scandata.PtydScan.label (str)

   The scan label

   Unique string identifying the scan

   *default* = ``None``

.. py:data:: scandata.PtydScan.experimentID (str)

   Name of the experiment

   If None, a default value will be provided by the recipe. **unused**

   *default* = ``None``

.. py:data:: scandata.PtydScan.version (float)

   TODO: Explain this and decide if it is a user parameter.

   

   *default* = ``0.1``

.. py:data:: scandata.PtydScan.shape (int, tuple)

   Shape of the region of interest cropped from the raw data.

   Cropping dimension of the diffraction frame
   Can be None, (dimx, dimy), or dim. In the latter case shape will be (dim, dim).

   *default* = ``256``

.. py:data:: scandata.PtydScan.center (list, tuple, str)

   Center (pixel) of the optical axes in raw data

   If ``None``, this parameter will be set by :py:data:`~.scan.data.auto_center` or elsewhere

   *default* = ``'fftshift'``

.. py:data:: scandata.PtydScan.psize (float, tuple)

   Detector pixel size

   Dimensions of the detector pixels (in meters)

   *default* = ``0.000172 (>0.0)``

.. py:data:: scandata.PtydScan.distance (float)

   Sample to detector distance

   In meters.

   *default* = ``7.19 (>0.0)``

.. py:data:: scandata.PtydScan.energy (float)

   Photon energy of the incident radiation in keV

   

   *default* = ``7.2 (>0.0)``

.. py:data:: scandata.PtydScan.add_poisson_noise (bool)

   Decides whether the scan should have poisson noise or not

   

   *default* = ``False``

.. py:data:: scandata.PtydScan.source (str, NoneType)

   Alternate source file path if data is meant to be reprocessed.

   `None` for input shall be deprecated in future

   *default* = ``'file'``


scandata.MoonFlowerScan
-----------------------

.. py:data:: scandata.MoonFlowerScan (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scandata.MoonFlowerScan.name (str)

   

   

   *default* = ``'MoonFlowerScan'``

.. py:data:: scandata.MoonFlowerScan.dfile (str)

   File path where prepared data will be saved in the ``ptyd`` format.

   

   *default* = ``None``

.. py:data:: scandata.MoonFlowerScan.chunk_format (str)

   Appendix to saved files if save == 'link'

   

   *default* = ``'.chunk%02d'``

.. py:data:: scandata.MoonFlowerScan.save (str)

   Saving mode

   Mode to use to save data to file.
   
   
   - ``None``: No saving
   - ``'merge'``: attemts to merge data in single chunk **[not implemented]**
   - ``'append'``: appends each chunk in master \*.ptyd file
   - ``'link'``: appends external links in master \*.ptyd file and stores chunks separately
   
   
   in the path given by the link. Links file paths are relative to master file.

   *default* = ``None``

.. py:data:: scandata.MoonFlowerScan.auto_center (bool)

   Determine if center in data is calculated automatically

   
   - ``False``, no automatic centering
   - ``None``, only if :py:data:`center` is ``None``
   - ``True``, it will be enforced

   *default* = ``None``

.. py:data:: scandata.MoonFlowerScan.load_parallel (str)

   Determines what will be loaded in parallel

   Choose from ``None``, ``'data'``, ``'common'``, ``'all'``

   *default* = ``'data'``

.. py:data:: scandata.MoonFlowerScan.rebin (int)

   Rebinning factor

   Rebinning factor for the raw data frames. ``'None'`` or ``1`` both mean *no binning*

   *default* = ``None (>1, <32)``

.. py:data:: scandata.MoonFlowerScan.orientation (int, tuple, list)

   Data frame orientation

   Choose
   
   
   - ``None`` or ``0``: correct orientation
   - ``1``: invert columns (numpy.flip_lr)
   - ``2``: invert rows  (numpy.flip_ud)
   - ``3``: invert columns, invert rows
   - ``4``: transpose (numpy.transpose)
   - ``4+i``: tranpose + other operations from above
   
   
   Alternatively, a 3-tuple of booleans may be provided ``(do_transpose,
   do_flipud, do_fliplr)``

   *default* = ``None``

.. py:data:: scandata.MoonFlowerScan.min_frames (int)

   Minimum number of frames loaded by each node

   

   *default* = ``1 (>1)``

.. py:data:: scandata.MoonFlowerScan.positions_theory (ndarray)

   Theoretical positions for this scan

   If provided, experimental positions from :py:class:`PtyScan` subclass will be ignored. If data
   preparation is called from Ptycho instance, the calculated positions from the
   :py:func:`ptypy.core.xy.from_pars` dict will be inserted here

   *default* = ``None``

.. py:data:: scandata.MoonFlowerScan.num_frames (int)

   Number of frames to simulate

   

   *default* = ``100``

.. py:data:: scandata.MoonFlowerScan.label (str)

   The scan label

   Unique string identifying the scan

   *default* = ``None``

.. py:data:: scandata.MoonFlowerScan.experimentID (str)

   Name of the experiment

   If None, a default value will be provided by the recipe. **unused**

   *default* = ``None``

.. py:data:: scandata.MoonFlowerScan.version (float)

   TODO: Explain this and decide if it is a user parameter.

   

   *default* = ``0.1``

.. py:data:: scandata.MoonFlowerScan.shape (int, tuple)

   Shape of the region of interest cropped from the raw data.

   Cropping dimension of the diffraction frame
   Can be None, (dimx, dimy), or dim. In the latter case shape will be (dim, dim).

   *default* = ``128``

.. py:data:: scandata.MoonFlowerScan.center (list, tuple, str)

   Center (pixel) of the optical axes in raw data

   If ``None``, this parameter will be set by :py:data:`~.scan.data.auto_center` or elsewhere

   *default* = ``'fftshift'``

.. py:data:: scandata.MoonFlowerScan.psize (float, tuple)

   Detector pixel size

   Dimensions of the detector pixels (in meters)

   *default* = ``0.000172 (>0.0)``

.. py:data:: scandata.MoonFlowerScan.distance (float)

   Sample to detector distance

   In meters.

   *default* = ``7.19 (>0.0)``

.. py:data:: scandata.MoonFlowerScan.energy (float)

   Photon energy of the incident radiation in keV

   

   *default* = ``7.2 (>0.0)``

.. py:data:: scandata.MoonFlowerScan.add_poisson_noise (bool)

   Decides whether the scan should have poisson noise or not

   

   *default* = ``True``

.. py:data:: scandata.MoonFlowerScan.density (float)

   Position distance in fraction of illumination frame

   

   *default* = ``0.2``

.. py:data:: scandata.MoonFlowerScan.model (str)

   The scan pattern

   

   *default* = ``'round'``

.. py:data:: scandata.MoonFlowerScan.photons (float)

   Total number of photons for Poisson noise

   

   *default* = ``100000000.0``

.. py:data:: scandata.MoonFlowerScan.psf (float)

   Point spread function of the detector

   

   *default* = ``0.0``

.. py:data:: scandata.MoonFlowerScan.block_wait_count (int)

   Signals a WAIT to the model after this many blocks.

   

   *default* = ``0``


scandata.QuickScan
------------------

.. py:data:: scandata.QuickScan (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scandata.QuickScan.name (str)

   

   

   *default* = ``'MoonFlowerScan'``

.. py:data:: scandata.QuickScan.dfile (str)

   File path where prepared data will be saved in the ``ptyd`` format.

   

   *default* = ``None``

.. py:data:: scandata.QuickScan.chunk_format (str)

   Appendix to saved files if save == 'link'

   

   *default* = ``'.chunk%02d'``

.. py:data:: scandata.QuickScan.save (str)

   Saving mode

   Mode to use to save data to file.
   
   
   - ``None``: No saving
   - ``'merge'``: attemts to merge data in single chunk **[not implemented]**
   - ``'append'``: appends each chunk in master \*.ptyd file
   - ``'link'``: appends external links in master \*.ptyd file and stores chunks separately
   
   
   in the path given by the link. Links file paths are relative to master file.

   *default* = ``None``

.. py:data:: scandata.QuickScan.auto_center (bool)

   Determine if center in data is calculated automatically

   
   - ``False``, no automatic centering
   - ``None``, only if :py:data:`center` is ``None``
   - ``True``, it will be enforced

   *default* = ``None``

.. py:data:: scandata.QuickScan.load_parallel (str)

   Determines what will be loaded in parallel

   Choose from ``None``, ``'data'``, ``'common'``, ``'all'``

   *default* = ``'data'``

.. py:data:: scandata.QuickScan.rebin (int)

   Rebinning factor

   Rebinning factor for the raw data frames. ``'None'`` or ``1`` both mean *no binning*

   *default* = ``None (>1, <32)``

.. py:data:: scandata.QuickScan.orientation (int, tuple, list)

   Data frame orientation

   Choose
   
   
   - ``None`` or ``0``: correct orientation
   - ``1``: invert columns (numpy.flip_lr)
   - ``2``: invert rows  (numpy.flip_ud)
   - ``3``: invert columns, invert rows
   - ``4``: transpose (numpy.transpose)
   - ``4+i``: tranpose + other operations from above
   
   
   Alternatively, a 3-tuple of booleans may be provided ``(do_transpose,
   do_flipud, do_fliplr)``

   *default* = ``None``

.. py:data:: scandata.QuickScan.min_frames (int)

   Minimum number of frames loaded by each node

   

   *default* = ``1 (>1)``

.. py:data:: scandata.QuickScan.positions_theory (ndarray)

   Theoretical positions for this scan

   If provided, experimental positions from :py:class:`PtyScan` subclass will be ignored. If data
   preparation is called from Ptycho instance, the calculated positions from the
   :py:func:`ptypy.core.xy.from_pars` dict will be inserted here

   *default* = ``None``

.. py:data:: scandata.QuickScan.num_frames (int)

   Number of frames to simulate

   

   *default* = ``100``

.. py:data:: scandata.QuickScan.label (str)

   The scan label

   Unique string identifying the scan

   *default* = ``None``

.. py:data:: scandata.QuickScan.experimentID (str)

   Name of the experiment

   If None, a default value will be provided by the recipe. **unused**

   *default* = ``None``

.. py:data:: scandata.QuickScan.version (float)

   TODO: Explain this and decide if it is a user parameter.

   

   *default* = ``0.1``

.. py:data:: scandata.QuickScan.shape (int, tuple)

   Shape of the region of interest cropped from the raw data.

   Cropping dimension of the diffraction frame
   Can be None, (dimx, dimy), or dim. In the latter case shape will be (dim, dim).

   *default* = ``64``

.. py:data:: scandata.QuickScan.center (list, tuple, str)

   Center (pixel) of the optical axes in raw data

   If ``None``, this parameter will be set by :py:data:`~.scan.data.auto_center` or elsewhere

   *default* = ``'fftshift'``

.. py:data:: scandata.QuickScan.psize (float, tuple)

   Detector pixel size

   Dimensions of the detector pixels (in meters)

   *default* = ``0.000172 (>0.0)``

.. py:data:: scandata.QuickScan.distance (float)

   Sample to detector distance

   In meters.

   *default* = ``7.19 (>0.0)``

.. py:data:: scandata.QuickScan.energy (float)

   Photon energy of the incident radiation in keV

   

   *default* = ``7.2 (>0.0)``

.. py:data:: scandata.QuickScan.add_poisson_noise (bool)

   Decides whether the scan should have poisson noise or not

   

   *default* = ``False``

.. py:data:: scandata.QuickScan.density (float)

   Position distance in fraction of illumination frame

   

   *default* = ``0.05``


scandata.SimScan
----------------

.. py:data:: scandata.SimScan (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.illumination (Param, str)

   Illumination parameters

   

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.illumination.aperture (Param)

   Beam aperture parameters

   

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.illumination.aperture.rotate (float)

   Rotate aperture by this value

   

   *default* = ``0.0``

.. py:data:: scandata.SimScan.illumination.aperture.central_stop (float)

   size of central stop as a fraction of aperture.size

   If not None: places a central beam stop in aperture. The value given here is the fraction of the beam stop compared to `size`

   *default* = ``None (>0.0, <1.0)``

.. py:data:: scandata.SimScan.illumination.aperture.diffuser (tuple)

   Noise in the transparen part of the aperture

   Can be either:
   - ``None`` : no noise
   - ``2-tuple`` : noise in phase (amplitude (rms), minimum feature size)
   - ``4-tuple`` : noise in phase & modulus (rms, mfs, rms_mod, mfs_mod)

   *default* = ``None``

.. py:data:: scandata.SimScan.illumination.aperture.edge (float)

   Edge width of aperture (in pixels!)

   

   *default* = ``2.0``

.. py:data:: scandata.SimScan.illumination.aperture.form (NoneType, str)

   One of None, 'rect' or 'circ'

   One of:
   - ``None`` : no aperture, this may be useful for nearfield
   - ``'rect'`` : rectangular aperture
   - ``'circ'`` : circular aperture

   *default* = ``'circ'``

.. py:data:: scandata.SimScan.illumination.aperture.offset (float, tuple, list)

   Offset between center of aperture and optical axes

   May also be a tuple (vertical,horizontal) for size in case of an asymmetric offset

   *default* = ``0.0``

.. py:data:: scandata.SimScan.illumination.aperture.size (float, tuple, list)

   Aperture width or diameter

   May also be a tuple *(vertical,horizontal)* in case of an asymmetric aperture

   *default* = ``None (>0.0)``

.. py:data:: scandata.SimScan.illumination.diversity (Param, NoneType)

   Probe mode(s) diversity parameters

   Can be ``None`` i.e. no diversity

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.illumination.diversity.noise (tuple, list)

   Noise in each non-primary mode of the illumination.

   Can be either:
   - ``None`` : no noise
   - ``2-tuple`` : noise in phase (amplitude (rms), minimum feature size)
   - ``4-tuple`` : noise in phase & modulus (rms, mfs, rms_mod, mfs_mod)

   *default* = ``(0.5, 1.0)``

.. py:data:: scandata.SimScan.illumination.diversity.power (tuple, float, list)

   Power of modes relative to main mode (zero-layer)

   

   *default* = ``0.1 (>0.0, <1.0)``

.. py:data:: scandata.SimScan.illumination.diversity.shift (float)

   Lateral shift of modes relative to main mode

   **[not implemented]**

   *default* = ``None``

.. py:data:: scandata.SimScan.illumination.model (str, ndarray)

   Type of illumination model

   One of:
   - ``None`` : model initialitziation defaults to flat array filled with the specified number of photons
   - ``'recon'`` : load model from previous reconstruction, see `recon` Parameters
   - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
   - *<resource>* : one of ptypys internal image resource strings
   - *<template>* : one of the templates inillumination module
   
   In script, you may pass a numpy.ndarray here directly as the model. It is considered as incoming wavefront and will be propagated according to `propagation` with an optional `aperture` applied before.

   *default* = ``None``

.. py:data:: scandata.SimScan.illumination.photons (int, float, NoneType)

   Number of photons in the incident illumination

   A value specified here will take precedence over calculated statistics from the loaded data.

   *default* = ``None (>0)``

.. py:data:: scandata.SimScan.illumination.propagation (Param)

   Parameters for propagation after aperture plane

   Propagation to focus takes precedence to parallel propagation if `foccused` is not ``None``

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.illumination.propagation.antialiasing (float)

   Antialiasing factor

   Antialiasing factor used when generating the probe. (numbers larger than 2 or 3 are memory hungry)
   **[Untested]**

   *default* = ``1``

.. py:data:: scandata.SimScan.illumination.propagation.focussed (NoneType, float)

   Propagation distance from aperture to focus

   If ``None`` or ``0`` : No focus propagation

   *default* = ``None``

.. py:data:: scandata.SimScan.illumination.propagation.parallel (NoneType, float)

   Parallel propagation distance

   If ``None`` or ``0`` : No parallel propagation

   *default* = ``None``

.. py:data:: scandata.SimScan.illumination.propagation.spot_size (NoneType, float)

   Focal spot diameter

   If not ``None``, this parameter is used to generate the appropriate aperture size instead of :py:data:`size`

   *default* = ``None (>0.0)``

.. py:data:: scandata.SimScan.illumination.recon (Param)

   Parameters to load from previous reconstruction

   

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.illumination.recon.label (NoneType, str)

   Scan label of diffraction that is to be used for probe estimate

   If ``None``, own scan label is used

   *default* = ``None``

.. py:data:: scandata.SimScan.illumination.recon.rfile (str)

   Path to a ``.ptyr`` compatible file

   

   *default* = ``'\\*.ptyr'``

.. py:data:: scandata.SimScan.sample (Param, str)

   

   

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.sample.model (str, ndarray)

   Type of initial object model

   One of:
   - ``None`` : model initialitziation defaults to flat array filled `fill`
   - ``'recon'`` : load model from STXM analysis of diffraction data
   - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
   - *<resource>* : one of ptypys internal model resource strings
   - *<template>* : one of the templates in sample module
   In script, you may pass a numpy.array here directly as the model. This array will be
   processed according to `process` in order to *simulate* a sample from e.g. a thickness
   profile.

   *default* = ``None``

.. py:data:: scandata.SimScan.sample.fill (float, complex)

   Default fill value

   

   *default* = ``1``

.. py:data:: scandata.SimScan.sample.recon (Param)

   Parameters to load from previous reconstruction

   

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.sample.recon.rfile (str)

   Path to a ``.ptyr`` compatible file

   

   *default* = ``'\\*.ptyr'``

.. py:data:: scandata.SimScan.sample.stxm (Param)

   STXM analysis parameters

   

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.sample.stxm.label (str)

   Scan label of diffraction that is to be used for probe estimate

   ``None``, own scan label is used

   *default* = ``None``

.. py:data:: scandata.SimScan.sample.process (Param, NoneType)

   Model processing parameters

   Can be ``None``, i.e. no processing

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.sample.process.offset (tuple, list)

   Offset between center of object array and scan pattern

   

   *default* = ``(0, 0) (>0.0)``

.. py:data:: scandata.SimScan.sample.process.zoom (list, tuple, float)

   Zoom value for object simulation.

   If ``None``, leave the array untouched. Otherwise the modeled or loaded image will be
   resized using :py:func:`zoom`.

   *default* = ``None (>0.0)``

.. py:data:: scandata.SimScan.sample.process.formula (str)

   Chemical formula

   A Formula compatible with a cxro database query,e.g. ``'Au'`` or ``'NaCl'`` or ``'H2O'``

   *default* = ``None``

.. py:data:: scandata.SimScan.sample.process.density (float)

   Density in [g/ccm]

   Only used if `formula` is not None

   *default* = ``1``

.. py:data:: scandata.SimScan.sample.process.thickness (float)

   Maximum thickness of sample

   If ``None``, the absolute values of loaded source array will be used

   *default* = ``1e-06``

.. py:data:: scandata.SimScan.sample.process.ref_index (list, tuple)

   Assigned refractive index, tuple of format (real, complex)

   If ``None``, treat source array as projection of refractive index a+bj for (a, b). If a refractive index
   is provided the array's absolute value will be used to scale the refractive index.

   *default* = ``(0.5, 0.0) (>0.0)``

.. py:data:: scandata.SimScan.sample.process.smoothing (int)

   Smoothing scale

   Smooth the projection with gaussian kernel of width given by `smoothing_mfs`

   *default* = ``2 (>0)``

.. py:data:: scandata.SimScan.sample.diversity (Param)

   Probe mode(s) diversity parameters

   Can be ``None`` i.e. no diversity

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.sample.diversity.noise (tuple)

   Noise in the generated modes of the illumination

   Can be either:
   - ``None`` : no noise
   - ``2-tuple`` : noise in phase (amplitude (rms), minimum feature size)
   - ``4-tuple`` : noise in phase & modulus (rms, mfs, rms_mod, mfs_mod)

   *default* = ``None``

.. py:data:: scandata.SimScan.sample.diversity.power (tuple, float)

   Power of modes relative to main mode (zero-layer)

   

   *default* = ``0.1``

.. py:data:: scandata.SimScan.sample.diversity.shift (float)

   Lateral shift of modes relative to main mode

   **[not implemented]**

   *default* = ``None``

.. py:data:: scandata.SimScan.xy (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.xy.override (ndarray)

   

   

   *default* = ``None``

.. py:data:: scandata.SimScan.xy.model (str)

   None, 'round', 'raster', 'spiral' or array-like

   

   *default* = ``None``

.. py:data:: scandata.SimScan.xy.extent (float, tuple)

   

   

   *default* = ``1.5e-05``

.. py:data:: scandata.SimScan.xy.spacing (float)

   Step size (grid spacing)

   

   *default* = ``1.5e-06``

.. py:data:: scandata.SimScan.xy.steps (int)

   

   

   *default* = ``10``

.. py:data:: scandata.SimScan.xy.offset (float)

   

   

   *default* = ``0.0``

.. py:data:: scandata.SimScan.xy.jitter (float)

   

   

   *default* = ``None``

.. py:data:: scandata.SimScan.xy.count (int)

   

   

   *default* = ``None``

.. py:data:: scandata.SimScan.name (str)

   

   

   *default* = ``'SimScan'``

.. py:data:: scandata.SimScan.dfile (str)

   File path where prepared data will be saved in the ``ptyd`` format.

   

   *default* = ``None``

.. py:data:: scandata.SimScan.chunk_format (str)

   Appendix to saved files if save == 'link'

   

   *default* = ``'.chunk%02d'``

.. py:data:: scandata.SimScan.save (str)

   Saving mode

   Mode to use to save data to file.
   
   
   - ``None``: No saving
   - ``'merge'``: attemts to merge data in single chunk **[not implemented]**
   - ``'append'``: appends each chunk in master \*.ptyd file
   - ``'link'``: appends external links in master \*.ptyd file and stores chunks separately
   
   
   in the path given by the link. Links file paths are relative to master file.

   *default* = ``None``

.. py:data:: scandata.SimScan.auto_center (bool)

   Determine if center in data is calculated automatically

   
   - ``False``, no automatic centering
   - ``None``, only if :py:data:`center` is ``None``
   - ``True``, it will be enforced

   *default* = ``None``

.. py:data:: scandata.SimScan.load_parallel (str)

   Determines what will be loaded in parallel

   Choose from ``None``, ``'data'``, ``'common'``, ``'all'``

   *default* = ``'data'``

.. py:data:: scandata.SimScan.rebin (int)

   Rebinning factor

   Rebinning factor for the raw data frames. ``'None'`` or ``1`` both mean *no binning*

   *default* = ``None (>1, <32)``

.. py:data:: scandata.SimScan.orientation (int, tuple, list)

   Data frame orientation

   Choose
   
   
   - ``None`` or ``0``: correct orientation
   - ``1``: invert columns (numpy.flip_lr)
   - ``2``: invert rows  (numpy.flip_ud)
   - ``3``: invert columns, invert rows
   - ``4``: transpose (numpy.transpose)
   - ``4+i``: tranpose + other operations from above
   
   
   Alternatively, a 3-tuple of booleans may be provided ``(do_transpose,
   do_flipud, do_fliplr)``

   *default* = ``None``

.. py:data:: scandata.SimScan.min_frames (int)

   Minimum number of frames loaded by each node

   

   *default* = ``1 (>1)``

.. py:data:: scandata.SimScan.positions_theory (ndarray)

   Theoretical positions for this scan

   If provided, experimental positions from :py:class:`PtyScan` subclass will be ignored. If data
   preparation is called from Ptycho instance, the calculated positions from the
   :py:func:`ptypy.core.xy.from_pars` dict will be inserted here

   *default* = ``None``

.. py:data:: scandata.SimScan.num_frames (int)

   Maximum number of frames to be prepared

   If `positions_theory` are provided, num_frames will be ovverriden with the number of
   positions available

   *default* = ``None``

.. py:data:: scandata.SimScan.label (str)

   The scan label

   Unique string identifying the scan

   *default* = ``None``

.. py:data:: scandata.SimScan.experimentID (str)

   Name of the experiment

   If None, a default value will be provided by the recipe. **unused**

   *default* = ``None``

.. py:data:: scandata.SimScan.version (float)

   TODO: Explain this and decide if it is a user parameter.

   

   *default* = ``0.1``

.. py:data:: scandata.SimScan.shape (int, tuple)

   Shape of the region of interest cropped from the raw data.

   Cropping dimension of the diffraction frame
   Can be None, (dimx, dimy), or dim. In the latter case shape will be (dim, dim).

   *default* = ``256``

.. py:data:: scandata.SimScan.center (list, tuple, str)

   Center (pixel) of the optical axes in raw data

   If ``None``, this parameter will be set by :py:data:`~.scan.data.auto_center` or elsewhere

   *default* = ``'fftshift'``

.. py:data:: scandata.SimScan.psize (float, tuple)

   Detector pixel size

   Dimensions of the detector pixels (in meters)

   *default* = ``0.000172 (>0.0)``

.. py:data:: scandata.SimScan.distance (float)

   Sample to detector distance

   In meters.

   *default* = ``7.19 (>0.0)``

.. py:data:: scandata.SimScan.energy (float)

   Photon energy of the incident radiation in keV

   

   *default* = ``7.2 (>0.0)``

.. py:data:: scandata.SimScan.add_poisson_noise (bool)

   Decides whether the scan should have poisson noise or not

   

   *default* = ``False``

.. py:data:: scandata.SimScan.pos_noise (float)

   Uniformly distributed noise in xy experimental positions

   

   *default* = ``1e-10``

.. py:data:: scandata.SimScan.pos_scale (float, list)

   Amplifier for noise.

   Will be extended to match number of positions. Maybe used to only put nois on individual points

   *default* = ``0.0``

.. py:data:: scandata.SimScan.pos_drift (float, list)

   Drift or offset paramter

   Noise independent drift. Will be extended like pos_scale.

   *default* = ``0.0``

.. py:data:: scandata.SimScan.detector (str, Param)

   

   

   *default* = ``Param({})``

.. py:data:: scandata.SimScan.frame_size (float, tuple)

   Final frame size when saving

   If None, no cropping/padding happens.

   *default* = ``None``

.. py:data:: scandata.SimScan.psf (float, tuple, ndarray)

   Parameters for gaussian convolution or convolution kernel after propagation

   Use it for simulating partial coherence.

   *default* = ``None``

.. py:data:: scandata.SimScan.verbose_level (int)

   Verbose level when simulating

   

   *default* = ``1``

.. py:data:: scandata.SimScan.plot (bool)

   

   

   *default* = ``True``

.. py:data:: scandata.SimScan.propagation (str)

   farfield or nearfield

   

   *default* = ``'farfield'``


scan
====

.. py:data:: scan (Param)

   

   

   *default* = ``Param({})``


scan.ScanModel
--------------

.. py:data:: scan.ScanModel (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.ScanModel.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.ScanModel.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.ScanModel.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.ScanModel.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.ScanModel.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.ScanModel.illumination (Param, str)

   Container for probe initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.ScanModel.sample (Param, str)

   Container for sample initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.ScanModel.resample (int, NoneType)

   Resampling fraction of the image frames w.r.t. diffraction frames

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


scan.BlockScanModel
-------------------

.. py:data:: scan.BlockScanModel (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.BlockScanModel.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.BlockScanModel.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.BlockScanModel.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.BlockScanModel.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.BlockScanModel.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.BlockScanModel.illumination (Param, str)

   Container for probe initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.BlockScanModel.sample (Param, str)

   Container for sample initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.BlockScanModel.resample (int, NoneType)

   Resampling fraction of the image frames w.r.t. diffraction frames

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


scan.Vanilla
------------

.. py:data:: scan.Vanilla (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.Vanilla.name (str)

   

   

   *default* = ``'Vanilla'``

.. py:data:: scan.Vanilla.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.Vanilla.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.Vanilla.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.Vanilla.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.Vanilla.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.Vanilla.illumination (Param, str)

   Container for probe initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.Vanilla.illumination.size (float)

   Initial probe size

   The probe is initialized as a flat circle.

   *default* = ``None``

.. py:data:: scan.Vanilla.sample (Param, str)

   Container for sample initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.Vanilla.sample.fill (float, complex)

   Initial sample value

   The sample is initialized with this value everywhere.

   *default* = ``1``

.. py:data:: scan.Vanilla.resample (int, NoneType)

   Resampling fraction of the image frames w.r.t. diffraction frames

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


scan.BlockVanilla
-----------------

.. py:data:: scan.BlockVanilla (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.BlockVanilla.name (str)

   

   

   *default* = ``'Vanilla'``

.. py:data:: scan.BlockVanilla.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.BlockVanilla.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.BlockVanilla.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.BlockVanilla.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.BlockVanilla.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.BlockVanilla.illumination (Param, str)

   Container for probe initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.BlockVanilla.illumination.size (float)

   Initial probe size

   The probe is initialized as a flat circle.

   *default* = ``None``

.. py:data:: scan.BlockVanilla.sample (Param, str)

   Container for sample initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.BlockVanilla.sample.fill (float, complex)

   Initial sample value

   The sample is initialized with this value everywhere.

   *default* = ``1``

.. py:data:: scan.BlockVanilla.resample (int, NoneType)

   Resampling fraction of the image frames w.r.t. diffraction frames

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


scan.Full
---------

.. py:data:: scan.Full (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.Full.name (str)

   

   

   *default* = ``'Full'``

.. py:data:: scan.Full.coherence (Param)

   Coherence parameters

   

   *default* = ``Param({}) (>0.0)``

.. py:data:: scan.Full.coherence.num_probe_modes (int)

   Number of probe modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.Full.coherence.num_object_modes (int)

   Number of object modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.Full.coherence.energies (list)

   ?

   ?

   *default* = ``[1.0]``

.. py:data:: scan.Full.coherence.spectrum (list)

   Amplitude of relative energy bins if the probe modes have a different energy

   

   *default* = ``[1.0] (>0.0)``

.. py:data:: scan.Full.coherence.object_dispersion (str)

   Energy dispersive response of the object

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.Full.coherence.probe_dispersion (str)

   Energy dispersive response of the probe

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.Full.resolution (NoneType, float)

   Will force the reconstruction to adapt to the given resolution, this might lead to cropping/padding in diffraction space which could reduce performance.

   Half-period resolution given in [m]

   *default* = ``None (>0.0)``

.. py:data:: scan.Full.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.Full.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.Full.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.Full.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.Full.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.Full.illumination (Param, str)

   Illumination parameters

   

   *default* = ``Param({})``

.. py:data:: scan.Full.illumination.aperture (Param)

   Beam aperture parameters

   

   *default* = ``Param({})``

.. py:data:: scan.Full.illumination.aperture.rotate (float)

   Rotate aperture by this value

   

   *default* = ``0.0``

.. py:data:: scan.Full.illumination.aperture.central_stop (float)

   size of central stop as a fraction of aperture.size

   If not None: places a central beam stop in aperture. The value given here is the fraction of the beam stop compared to `size`

   *default* = ``None (>0.0, <1.0)``

.. py:data:: scan.Full.illumination.aperture.diffuser (tuple)

   Noise in the transparen part of the aperture

   Can be either:
   - ``None`` : no noise
   - ``2-tuple`` : noise in phase (amplitude (rms), minimum feature size)
   - ``4-tuple`` : noise in phase & modulus (rms, mfs, rms_mod, mfs_mod)

   *default* = ``None``

.. py:data:: scan.Full.illumination.aperture.edge (float)

   Edge width of aperture (in pixels!)

   

   *default* = ``2.0``

.. py:data:: scan.Full.illumination.aperture.form (NoneType, str)

   One of None, 'rect' or 'circ'

   One of:
   - ``None`` : no aperture, this may be useful for nearfield
   - ``'rect'`` : rectangular aperture
   - ``'circ'`` : circular aperture

   *default* = ``'circ'``

.. py:data:: scan.Full.illumination.aperture.offset (float, tuple, list)

   Offset between center of aperture and optical axes

   May also be a tuple (vertical,horizontal) for size in case of an asymmetric offset

   *default* = ``0.0``

.. py:data:: scan.Full.illumination.aperture.size (float, tuple, list)

   Aperture width or diameter

   May also be a tuple *(vertical,horizontal)* in case of an asymmetric aperture

   *default* = ``None (>0.0)``

.. py:data:: scan.Full.illumination.diversity (Param, NoneType)

   Probe mode(s) diversity parameters

   Can be ``None`` i.e. no diversity

   *default* = ``Param({})``

.. py:data:: scan.Full.illumination.diversity.noise (tuple, list)

   Noise in each non-primary mode of the illumination.

   Can be either:
   - ``None`` : no noise
   - ``2-tuple`` : noise in phase (amplitude (rms), minimum feature size)
   - ``4-tuple`` : noise in phase & modulus (rms, mfs, rms_mod, mfs_mod)

   *default* = ``(0.5, 1.0)``

.. py:data:: scan.Full.illumination.diversity.power (tuple, float, list)

   Power of modes relative to main mode (zero-layer)

   

   *default* = ``0.1 (>0.0, <1.0)``

.. py:data:: scan.Full.illumination.diversity.shift (float)

   Lateral shift of modes relative to main mode

   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.Full.illumination.model (str, ndarray)

   Type of illumination model

   One of:
   - ``None`` : model initialitziation defaults to flat array filled with the specified number of photons
   - ``'recon'`` : load model from previous reconstruction, see `recon` Parameters
   - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
   - *<resource>* : one of ptypys internal image resource strings
   - *<template>* : one of the templates inillumination module
   
   In script, you may pass a numpy.ndarray here directly as the model. It is considered as incoming wavefront and will be propagated according to `propagation` with an optional `aperture` applied before.

   *default* = ``None``

.. py:data:: scan.Full.illumination.photons (int, float, NoneType)

   Number of photons in the incident illumination

   A value specified here will take precedence over calculated statistics from the loaded data.

   *default* = ``None (>0)``

.. py:data:: scan.Full.illumination.propagation (Param)

   Parameters for propagation after aperture plane

   Propagation to focus takes precedence to parallel propagation if `foccused` is not ``None``

   *default* = ``Param({})``

.. py:data:: scan.Full.illumination.propagation.antialiasing (float)

   Antialiasing factor

   Antialiasing factor used when generating the probe. (numbers larger than 2 or 3 are memory hungry)
   **[Untested]**

   *default* = ``1``

.. py:data:: scan.Full.illumination.propagation.focussed (NoneType, float)

   Propagation distance from aperture to focus

   If ``None`` or ``0`` : No focus propagation

   *default* = ``None``

.. py:data:: scan.Full.illumination.propagation.parallel (NoneType, float)

   Parallel propagation distance

   If ``None`` or ``0`` : No parallel propagation

   *default* = ``None``

.. py:data:: scan.Full.illumination.propagation.spot_size (NoneType, float)

   Focal spot diameter

   If not ``None``, this parameter is used to generate the appropriate aperture size instead of :py:data:`size`

   *default* = ``None (>0.0)``

.. py:data:: scan.Full.illumination.recon (Param)

   Parameters to load from previous reconstruction

   

   *default* = ``Param({})``

.. py:data:: scan.Full.illumination.recon.label (NoneType, str)

   Scan label of diffraction that is to be used for probe estimate

   If ``None``, own scan label is used

   *default* = ``None``

.. py:data:: scan.Full.illumination.recon.rfile (str)

   Path to a ``.ptyr`` compatible file

   

   *default* = ``'\\*.ptyr'``

.. py:data:: scan.Full.sample (Param, str)

   

   

   *default* = ``Param({})``

.. py:data:: scan.Full.sample.model (str, ndarray)

   Type of initial object model

   One of:
   - ``None`` : model initialitziation defaults to flat array filled `fill`
   - ``'recon'`` : load model from STXM analysis of diffraction data
   - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
   - *<resource>* : one of ptypys internal model resource strings
   - *<template>* : one of the templates in sample module
   In script, you may pass a numpy.array here directly as the model. This array will be
   processed according to `process` in order to *simulate* a sample from e.g. a thickness
   profile.

   *default* = ``None``

.. py:data:: scan.Full.sample.fill (float, complex)

   Default fill value

   

   *default* = ``1``

.. py:data:: scan.Full.sample.recon (Param)

   Parameters to load from previous reconstruction

   

   *default* = ``Param({})``

.. py:data:: scan.Full.sample.recon.rfile (str)

   Path to a ``.ptyr`` compatible file

   

   *default* = ``'\\*.ptyr'``

.. py:data:: scan.Full.sample.stxm (Param)

   STXM analysis parameters

   

   *default* = ``Param({})``

.. py:data:: scan.Full.sample.stxm.label (str)

   Scan label of diffraction that is to be used for probe estimate

   ``None``, own scan label is used

   *default* = ``None``

.. py:data:: scan.Full.sample.process (Param, NoneType)

   Model processing parameters

   Can be ``None``, i.e. no processing

   *default* = ``Param({})``

.. py:data:: scan.Full.sample.process.offset (tuple, list)

   Offset between center of object array and scan pattern

   

   *default* = ``(0, 0) (>0.0)``

.. py:data:: scan.Full.sample.process.zoom (list, tuple, float)

   Zoom value for object simulation.

   If ``None``, leave the array untouched. Otherwise the modeled or loaded image will be
   resized using :py:func:`zoom`.

   *default* = ``None (>0.0)``

.. py:data:: scan.Full.sample.process.formula (str)

   Chemical formula

   A Formula compatible with a cxro database query,e.g. ``'Au'`` or ``'NaCl'`` or ``'H2O'``

   *default* = ``None``

.. py:data:: scan.Full.sample.process.density (float)

   Density in [g/ccm]

   Only used if `formula` is not None

   *default* = ``1``

.. py:data:: scan.Full.sample.process.thickness (float)

   Maximum thickness of sample

   If ``None``, the absolute values of loaded source array will be used

   *default* = ``1e-06``

.. py:data:: scan.Full.sample.process.ref_index (list, tuple)

   Assigned refractive index, tuple of format (real, complex)

   If ``None``, treat source array as projection of refractive index a+bj for (a, b). If a refractive index
   is provided the array's absolute value will be used to scale the refractive index.

   *default* = ``(0.5, 0.0) (>0.0)``

.. py:data:: scan.Full.sample.process.smoothing (int)

   Smoothing scale

   Smooth the projection with gaussian kernel of width given by `smoothing_mfs`

   *default* = ``2 (>0)``

.. py:data:: scan.Full.sample.diversity (Param)

   Probe mode(s) diversity parameters

   Can be ``None`` i.e. no diversity

   *default* = ``Param({})``

.. py:data:: scan.Full.sample.diversity.noise (tuple)

   Noise in the generated modes of the illumination

   Can be either:
   - ``None`` : no noise
   - ``2-tuple`` : noise in phase (amplitude (rms), minimum feature size)
   - ``4-tuple`` : noise in phase & modulus (rms, mfs, rms_mod, mfs_mod)

   *default* = ``None``

.. py:data:: scan.Full.sample.diversity.power (tuple, float)

   Power of modes relative to main mode (zero-layer)

   

   *default* = ``0.1``

.. py:data:: scan.Full.sample.diversity.shift (float)

   Lateral shift of modes relative to main mode

   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.Full.resample (int, NoneType)

   Resampling fraction of the image frames w.r.t. diffraction frames

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


scan.BlockFull
--------------

.. py:data:: scan.BlockFull (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.name (str)

   

   

   *default* = ``'Full'``

.. py:data:: scan.BlockFull.coherence (Param)

   Coherence parameters

   

   *default* = ``Param({}) (>0.0)``

.. py:data:: scan.BlockFull.coherence.num_probe_modes (int)

   Number of probe modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.BlockFull.coherence.num_object_modes (int)

   Number of object modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.BlockFull.coherence.energies (list)

   ?

   ?

   *default* = ``[1.0]``

.. py:data:: scan.BlockFull.coherence.spectrum (list)

   Amplitude of relative energy bins if the probe modes have a different energy

   

   *default* = ``[1.0] (>0.0)``

.. py:data:: scan.BlockFull.coherence.object_dispersion (str)

   Energy dispersive response of the object

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.BlockFull.coherence.probe_dispersion (str)

   Energy dispersive response of the probe

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.BlockFull.resolution (NoneType, float)

   Will force the reconstruction to adapt to the given resolution, this might lead to cropping/padding in diffraction space which could reduce performance.

   Half-period resolution given in [m]

   *default* = ``None (>0.0)``

.. py:data:: scan.BlockFull.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.BlockFull.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.BlockFull.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.BlockFull.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.BlockFull.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.BlockFull.illumination (Param, str)

   Illumination parameters

   

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.illumination.aperture (Param)

   Beam aperture parameters

   

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.illumination.aperture.rotate (float)

   Rotate aperture by this value

   

   *default* = ``0.0``

.. py:data:: scan.BlockFull.illumination.aperture.central_stop (float)

   size of central stop as a fraction of aperture.size

   If not None: places a central beam stop in aperture. The value given here is the fraction of the beam stop compared to `size`

   *default* = ``None (>0.0, <1.0)``

.. py:data:: scan.BlockFull.illumination.aperture.diffuser (tuple)

   Noise in the transparen part of the aperture

   Can be either:
   - ``None`` : no noise
   - ``2-tuple`` : noise in phase (amplitude (rms), minimum feature size)
   - ``4-tuple`` : noise in phase & modulus (rms, mfs, rms_mod, mfs_mod)

   *default* = ``None``

.. py:data:: scan.BlockFull.illumination.aperture.edge (float)

   Edge width of aperture (in pixels!)

   

   *default* = ``2.0``

.. py:data:: scan.BlockFull.illumination.aperture.form (NoneType, str)

   One of None, 'rect' or 'circ'

   One of:
   - ``None`` : no aperture, this may be useful for nearfield
   - ``'rect'`` : rectangular aperture
   - ``'circ'`` : circular aperture

   *default* = ``'circ'``

.. py:data:: scan.BlockFull.illumination.aperture.offset (float, tuple, list)

   Offset between center of aperture and optical axes

   May also be a tuple (vertical,horizontal) for size in case of an asymmetric offset

   *default* = ``0.0``

.. py:data:: scan.BlockFull.illumination.aperture.size (float, tuple, list)

   Aperture width or diameter

   May also be a tuple *(vertical,horizontal)* in case of an asymmetric aperture

   *default* = ``None (>0.0)``

.. py:data:: scan.BlockFull.illumination.diversity (Param, NoneType)

   Probe mode(s) diversity parameters

   Can be ``None`` i.e. no diversity

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.illumination.diversity.noise (tuple, list)

   Noise in each non-primary mode of the illumination.

   Can be either:
   - ``None`` : no noise
   - ``2-tuple`` : noise in phase (amplitude (rms), minimum feature size)
   - ``4-tuple`` : noise in phase & modulus (rms, mfs, rms_mod, mfs_mod)

   *default* = ``(0.5, 1.0)``

.. py:data:: scan.BlockFull.illumination.diversity.power (tuple, float, list)

   Power of modes relative to main mode (zero-layer)

   

   *default* = ``0.1 (>0.0, <1.0)``

.. py:data:: scan.BlockFull.illumination.diversity.shift (float)

   Lateral shift of modes relative to main mode

   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.BlockFull.illumination.model (str, ndarray)

   Type of illumination model

   One of:
   - ``None`` : model initialitziation defaults to flat array filled with the specified number of photons
   - ``'recon'`` : load model from previous reconstruction, see `recon` Parameters
   - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
   - *<resource>* : one of ptypys internal image resource strings
   - *<template>* : one of the templates inillumination module
   
   In script, you may pass a numpy.ndarray here directly as the model. It is considered as incoming wavefront and will be propagated according to `propagation` with an optional `aperture` applied before.

   *default* = ``None``

.. py:data:: scan.BlockFull.illumination.photons (int, float, NoneType)

   Number of photons in the incident illumination

   A value specified here will take precedence over calculated statistics from the loaded data.

   *default* = ``None (>0)``

.. py:data:: scan.BlockFull.illumination.propagation (Param)

   Parameters for propagation after aperture plane

   Propagation to focus takes precedence to parallel propagation if `foccused` is not ``None``

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.illumination.propagation.antialiasing (float)

   Antialiasing factor

   Antialiasing factor used when generating the probe. (numbers larger than 2 or 3 are memory hungry)
   **[Untested]**

   *default* = ``1``

.. py:data:: scan.BlockFull.illumination.propagation.focussed (NoneType, float)

   Propagation distance from aperture to focus

   If ``None`` or ``0`` : No focus propagation

   *default* = ``None``

.. py:data:: scan.BlockFull.illumination.propagation.parallel (NoneType, float)

   Parallel propagation distance

   If ``None`` or ``0`` : No parallel propagation

   *default* = ``None``

.. py:data:: scan.BlockFull.illumination.propagation.spot_size (NoneType, float)

   Focal spot diameter

   If not ``None``, this parameter is used to generate the appropriate aperture size instead of :py:data:`size`

   *default* = ``None (>0.0)``

.. py:data:: scan.BlockFull.illumination.recon (Param)

   Parameters to load from previous reconstruction

   

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.illumination.recon.label (NoneType, str)

   Scan label of diffraction that is to be used for probe estimate

   If ``None``, own scan label is used

   *default* = ``None``

.. py:data:: scan.BlockFull.illumination.recon.rfile (str)

   Path to a ``.ptyr`` compatible file

   

   *default* = ``'\\*.ptyr'``

.. py:data:: scan.BlockFull.sample (Param, str)

   

   

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.sample.model (str, ndarray)

   Type of initial object model

   One of:
   - ``None`` : model initialitziation defaults to flat array filled `fill`
   - ``'recon'`` : load model from STXM analysis of diffraction data
   - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
   - *<resource>* : one of ptypys internal model resource strings
   - *<template>* : one of the templates in sample module
   In script, you may pass a numpy.array here directly as the model. This array will be
   processed according to `process` in order to *simulate* a sample from e.g. a thickness
   profile.

   *default* = ``None``

.. py:data:: scan.BlockFull.sample.fill (float, complex)

   Default fill value

   

   *default* = ``1``

.. py:data:: scan.BlockFull.sample.recon (Param)

   Parameters to load from previous reconstruction

   

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.sample.recon.rfile (str)

   Path to a ``.ptyr`` compatible file

   

   *default* = ``'\\*.ptyr'``

.. py:data:: scan.BlockFull.sample.stxm (Param)

   STXM analysis parameters

   

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.sample.stxm.label (str)

   Scan label of diffraction that is to be used for probe estimate

   ``None``, own scan label is used

   *default* = ``None``

.. py:data:: scan.BlockFull.sample.process (Param, NoneType)

   Model processing parameters

   Can be ``None``, i.e. no processing

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.sample.process.offset (tuple, list)

   Offset between center of object array and scan pattern

   

   *default* = ``(0, 0) (>0.0)``

.. py:data:: scan.BlockFull.sample.process.zoom (list, tuple, float)

   Zoom value for object simulation.

   If ``None``, leave the array untouched. Otherwise the modeled or loaded image will be
   resized using :py:func:`zoom`.

   *default* = ``None (>0.0)``

.. py:data:: scan.BlockFull.sample.process.formula (str)

   Chemical formula

   A Formula compatible with a cxro database query,e.g. ``'Au'`` or ``'NaCl'`` or ``'H2O'``

   *default* = ``None``

.. py:data:: scan.BlockFull.sample.process.density (float)

   Density in [g/ccm]

   Only used if `formula` is not None

   *default* = ``1``

.. py:data:: scan.BlockFull.sample.process.thickness (float)

   Maximum thickness of sample

   If ``None``, the absolute values of loaded source array will be used

   *default* = ``1e-06``

.. py:data:: scan.BlockFull.sample.process.ref_index (list, tuple)

   Assigned refractive index, tuple of format (real, complex)

   If ``None``, treat source array as projection of refractive index a+bj for (a, b). If a refractive index
   is provided the array's absolute value will be used to scale the refractive index.

   *default* = ``(0.5, 0.0) (>0.0)``

.. py:data:: scan.BlockFull.sample.process.smoothing (int)

   Smoothing scale

   Smooth the projection with gaussian kernel of width given by `smoothing_mfs`

   *default* = ``2 (>0)``

.. py:data:: scan.BlockFull.sample.diversity (Param)

   Probe mode(s) diversity parameters

   Can be ``None`` i.e. no diversity

   *default* = ``Param({})``

.. py:data:: scan.BlockFull.sample.diversity.noise (tuple)

   Noise in the generated modes of the illumination

   Can be either:
   - ``None`` : no noise
   - ``2-tuple`` : noise in phase (amplitude (rms), minimum feature size)
   - ``4-tuple`` : noise in phase & modulus (rms, mfs, rms_mod, mfs_mod)

   *default* = ``None``

.. py:data:: scan.BlockFull.sample.diversity.power (tuple, float)

   Power of modes relative to main mode (zero-layer)

   

   *default* = ``0.1``

.. py:data:: scan.BlockFull.sample.diversity.shift (float)

   Lateral shift of modes relative to main mode

   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.BlockFull.resample (int, NoneType)

   Resampling fraction of the image frames w.r.t. diffraction frames

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


scan.OPRModel
-------------

.. py:data:: scan.OPRModel (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.OPRModel.name (str)

   

   

   *default* = ``'Full'``

.. py:data:: scan.OPRModel.coherence (Param)

   Coherence parameters

   

   *default* = ``Param({}) (>0.0)``

.. py:data:: scan.OPRModel.coherence.num_probe_modes (int)

   Number of probe modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.OPRModel.coherence.num_object_modes (int)

   Number of object modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.OPRModel.coherence.energies (list)

   ?

   ?

   *default* = ``[1.0]``

.. py:data:: scan.OPRModel.coherence.spectrum (list)

   Amplitude of relative energy bins if the probe modes have a different energy

   

   *default* = ``[1.0] (>0.0)``

.. py:data:: scan.OPRModel.coherence.object_dispersion (str)

   Energy dispersive response of the object

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.OPRModel.coherence.probe_dispersion (str)

   Energy dispersive response of the probe

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.OPRModel.resolution (NoneType, float)

   Will force the reconstruction to adapt to the given resolution, this might lead to cropping/padding in diffraction space which could reduce performance.

   Half-period resolution given in [m]

   *default* = ``None (>0.0)``

.. py:data:: scan.OPRModel.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.OPRModel.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.OPRModel.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.OPRModel.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.OPRModel.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.OPRModel.illumination (Param, str)

   Container for probe initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.OPRModel.sample (Param, str)

   Container for sample initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.OPRModel.resample (int, NoneType)

   Resampling fraction of the image frames w.r.t. diffraction frames

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


scan.BlockOPRModel
------------------

.. py:data:: scan.BlockOPRModel (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.BlockOPRModel.name (str)

   

   

   *default* = ``'Full'``

.. py:data:: scan.BlockOPRModel.coherence (Param)

   Coherence parameters

   

   *default* = ``Param({}) (>0.0)``

.. py:data:: scan.BlockOPRModel.coherence.num_probe_modes (int)

   Number of probe modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.BlockOPRModel.coherence.num_object_modes (int)

   Number of object modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.BlockOPRModel.coherence.energies (list)

   ?

   ?

   *default* = ``[1.0]``

.. py:data:: scan.BlockOPRModel.coherence.spectrum (list)

   Amplitude of relative energy bins if the probe modes have a different energy

   

   *default* = ``[1.0] (>0.0)``

.. py:data:: scan.BlockOPRModel.coherence.object_dispersion (str)

   Energy dispersive response of the object

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.BlockOPRModel.coherence.probe_dispersion (str)

   Energy dispersive response of the probe

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.BlockOPRModel.resolution (NoneType, float)

   Will force the reconstruction to adapt to the given resolution, this might lead to cropping/padding in diffraction space which could reduce performance.

   Half-period resolution given in [m]

   *default* = ``None (>0.0)``

.. py:data:: scan.BlockOPRModel.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.BlockOPRModel.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.BlockOPRModel.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.BlockOPRModel.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.BlockOPRModel.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.BlockOPRModel.illumination (Param, str)

   Container for probe initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.BlockOPRModel.sample (Param, str)

   Container for sample initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.BlockOPRModel.resample (int, NoneType)

   Resampling fraction of the image frames w.r.t. diffraction frames

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


scan.GradFull
-------------

.. py:data:: scan.GradFull (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.GradFull.name (str)

   

   

   *default* = ``'Full'``

.. py:data:: scan.GradFull.coherence (Param)

   Coherence parameters

   

   *default* = ``Param({}) (>0.0)``

.. py:data:: scan.GradFull.coherence.num_probe_modes (int)

   Number of probe modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.GradFull.coherence.num_object_modes (int)

   Number of object modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.GradFull.coherence.energies (list)

   ?

   ?

   *default* = ``[1.0]``

.. py:data:: scan.GradFull.coherence.spectrum (list)

   Amplitude of relative energy bins if the probe modes have a different energy

   

   *default* = ``[1.0] (>0.0)``

.. py:data:: scan.GradFull.coherence.object_dispersion (str)

   Energy dispersive response of the object

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.GradFull.coherence.probe_dispersion (str)

   Energy dispersive response of the probe

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.GradFull.resolution (NoneType, float)

   Will force the reconstruction to adapt to the given resolution, this might lead to cropping/padding in diffraction space which could reduce performance.

   Half-period resolution given in [m]

   *default* = ``None (>0.0)``

.. py:data:: scan.GradFull.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.GradFull.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.GradFull.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.GradFull.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.GradFull.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.GradFull.illumination (Param, str)

   Container for probe initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.GradFull.sample (Param, str)

   Container for sample initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.GradFull.resample (int, NoneType)

   Resampling fraction of the image frames w.r.t. diffraction frames

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


scan.BlockGradFull
------------------

.. py:data:: scan.BlockGradFull (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.BlockGradFull.name (str)

   

   

   *default* = ``'Full'``

.. py:data:: scan.BlockGradFull.coherence (Param)

   Coherence parameters

   

   *default* = ``Param({}) (>0.0)``

.. py:data:: scan.BlockGradFull.coherence.num_probe_modes (int)

   Number of probe modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.BlockGradFull.coherence.num_object_modes (int)

   Number of object modes

   

   *default* = ``1 (>0)``

.. py:data:: scan.BlockGradFull.coherence.energies (list)

   ?

   ?

   *default* = ``[1.0]``

.. py:data:: scan.BlockGradFull.coherence.spectrum (list)

   Amplitude of relative energy bins if the probe modes have a different energy

   

   *default* = ``[1.0] (>0.0)``

.. py:data:: scan.BlockGradFull.coherence.object_dispersion (str)

   Energy dispersive response of the object

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.BlockGradFull.coherence.probe_dispersion (str)

   Energy dispersive response of the probe

   One of:
   - ``None`` or ``'achromatic'``: no dispersion
   - ``'linear'``: linear response model
   - ``'irregular'``: no assumption
   **[not implemented]**

   *default* = ``None``

.. py:data:: scan.BlockGradFull.resolution (NoneType, float)

   Will force the reconstruction to adapt to the given resolution, this might lead to cropping/padding in diffraction space which could reduce performance.

   Half-period resolution given in [m]

   *default* = ``None (>0.0)``

.. py:data:: scan.BlockGradFull.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.BlockGradFull.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.BlockGradFull.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.BlockGradFull.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.BlockGradFull.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.BlockGradFull.illumination (Param, str)

   Container for probe initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.BlockGradFull.sample (Param, str)

   Container for sample initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.BlockGradFull.resample (int, NoneType)

   Resampling fraction of the image frames w.r.t. diffraction frames

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


scan.Bragg3dModel
-----------------

.. py:data:: scan.Bragg3dModel (Param)

   

   

   *default* = ``Param({})``

.. py:data:: scan.Bragg3dModel.illumination (Param, str)

   Container for probe initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.Bragg3dModel.illumination.aperture (Param)

   Beam aperture parameters

   

   *default* = ``Param({})``

.. py:data:: scan.Bragg3dModel.illumination.aperture.rotate (float)

   Rotate aperture by this value

   

   *default* = ``0.0``

.. py:data:: scan.Bragg3dModel.illumination.aperture.central_stop (float)

   size of central stop as a fraction of aperture.size

   If not None: places a central beam stop in aperture. The value given here is the fraction of the beam stop compared to `size`

   *default* = ``None (>0.0, <1.0)``

.. py:data:: scan.Bragg3dModel.illumination.aperture.diffuser (tuple)

   Noise in the transparen part of the aperture

   Can be either:
   - ``None`` : no noise
   - ``2-tuple`` : noise in phase (amplitude (rms), minimum feature size)
   - ``4-tuple`` : noise in phase & modulus (rms, mfs, rms_mod, mfs_mod)

   *default* = ``None``

.. py:data:: scan.Bragg3dModel.illumination.aperture.edge (float)

   Edge width of aperture (in pixels!)

   

   *default* = ``2.0``

.. py:data:: scan.Bragg3dModel.illumination.aperture.form (NoneType, str)

   One of None, 'rect' or 'circ'

   One of:
   - ``None`` : no aperture, this may be useful for nearfield
   - ``'rect'`` : rectangular aperture
   - ``'circ'`` : circular aperture

   *default* = ``'circ'``

.. py:data:: scan.Bragg3dModel.illumination.aperture.offset (float, tuple, list)

   Offset between center of aperture and optical axes

   May also be a tuple (vertical,horizontal) for size in case of an asymmetric offset

   *default* = ``0.0``

.. py:data:: scan.Bragg3dModel.illumination.aperture.size (float, tuple, list)

   Aperture width or diameter

   May also be a tuple *(vertical,horizontal)* in case of an asymmetric aperture

   *default* = ``None (>0.0)``

.. py:data:: scan.Bragg3dModel.illumination.model (str, ndarray)

   Type of illumination model

   One of:
   - ``None`` : model initialitziation defaults to flat array filled with the specified number of photons
   - ``'recon'`` : load model from previous reconstruction, see `recon` Parameters
   - ``'stxm'`` : Estimate model from autocorrelation of mean diffraction data
   - *<resource>* : one of ptypys internal image resource strings
   - *<template>* : one of the templates inillumination module
   
   In script, you may pass a numpy.ndarray here directly as the model. It is considered as incoming wavefront and will be propagated according to `propagation` with an optional `aperture` applied before.

   *default* = ``None``

.. py:data:: scan.Bragg3dModel.illumination.photons (int, float, NoneType)

   Number of photons in the incident illumination

   A value specified here will take precedence over calculated statistics from the loaded data.

   *default* = ``None (>0)``

.. py:data:: scan.Bragg3dModel.illumination.propagation (Param)

   Parameters for propagation after aperture plane

   Propagation to focus takes precedence to parallel propagation if `foccused` is not ``None``

   *default* = ``Param({})``

.. py:data:: scan.Bragg3dModel.illumination.propagation.antialiasing (float)

   Antialiasing factor

   Antialiasing factor used when generating the probe. (numbers larger than 2 or 3 are memory hungry)
   **[Untested]**

   *default* = ``1``

.. py:data:: scan.Bragg3dModel.illumination.propagation.focussed (NoneType, float)

   Propagation distance from aperture to focus

   If ``None`` or ``0`` : No focus propagation

   *default* = ``None``

.. py:data:: scan.Bragg3dModel.illumination.propagation.parallel (NoneType, float)

   Parallel propagation distance

   If ``None`` or ``0`` : No parallel propagation

   *default* = ``None``

.. py:data:: scan.Bragg3dModel.illumination.propagation.spot_size (NoneType, float)

   Focal spot diameter

   If not ``None``, this parameter is used to generate the appropriate aperture size instead of :py:data:`size`

   *default* = ``None (>0.0)``

.. py:data:: scan.Bragg3dModel.illumination.recon (Param)

   Parameters to load from previous reconstruction

   

   *default* = ``Param({})``

.. py:data:: scan.Bragg3dModel.illumination.recon.label (NoneType, str)

   Scan label of diffraction that is to be used for probe estimate

   If ``None``, own scan label is used

   *default* = ``None``

.. py:data:: scan.Bragg3dModel.illumination.recon.rfile (str)

   Path to a ``.ptyr`` compatible file

   

   *default* = ``'\\*.ptyr'``

.. py:data:: scan.Bragg3dModel.illumination.size (float)

   Initial probe size

   The probe is initialized as a flat circle.

   *default* = ``None``

.. py:data:: scan.Bragg3dModel.name (str)

   

   

   *default* = ``'Bragg3dModel'``

.. py:data:: scan.Bragg3dModel.tags (list)

   Comma seperated string tags describing the data input

   [deprecated?]

   *default* = ``['dummy']``

.. py:data:: scan.Bragg3dModel.propagation (str)

   Propagation type

   Either "farfield" or "nearfield"

   *default* = ``'farfield'``

.. py:data:: scan.Bragg3dModel.ffttype (str)

   FFT library

   Choose from "numpy", "scipy" or "fftw"

   *default* = ``'scipy'``

.. py:data:: scan.Bragg3dModel.data (Param)

   Link to container for data preparation

   

   *default* = :py:data:`scandata.PtyScan`

.. py:data:: scan.Bragg3dModel.data.name (str)

   Name of the PtyScan subclass to use

   

   *default* = ``None``

.. py:data:: scan.Bragg3dModel.sample (Param, str)

   Container for sample initialization model

   

   *default* = ``Param({})``

.. py:data:: scan.Bragg3dModel.sample.fill (float, complex)

   Initial sample value

   The sample is initialized with this value everywhere.

   *default* = ``1``

.. py:data:: scan.Bragg3dModel.resample (int, NoneType)

   Diffraction resampling *CURRENTLY NOT SUPPORTED FOR BRAGG CASE*

   A resampling of 2 means that the image frame is to be sampled (in the detector plane) twice
   as densely as the raw diffraction data.

   *default* = ``1``


engine
======

.. py:data:: engine (Param)

   

   

   *default* = ``Param({})``


engine.DM
---------

.. py:data:: engine.DM (Param)

   

   

   *default* = ``Param({})``

.. py:data:: engine.DM.numiter (int)

   Total number of iterations

   For on-the-fly (live) processing, the reconstruction engine will iterate at least this many times after all data has been loaded.

   *default* = ``20 (>1)``

.. py:data:: engine.DM.numiter_contiguous (int)

   Number of iterations without interruption

   The engine will not return control to the caller until this number of iterations is completed (not processing server requests, I/O operations, ...).

   *default* = ``1 (>1)``

.. py:data:: engine.DM.probe_support (float, NoneType)

   Valid probe area as fraction of the probe frame

   Defines a circular area centered on the probe frame, in which the probe is allowed to be nonzero.

   *default* = ``0.7 (>0.0)``

.. py:data:: engine.DM.probe_fourier_support (float, NoneType)

   Valid probe area in frequency domain as fraction of the probe frame

   Defines a circular area centered on the probe frame (in frequency domain), in which the probe is allowed to be nonzero.

   *default* = ``None (>0.0)``

.. py:data:: engine.DM.record_local_error (bool)

   If True, save the local map of errors into the runtime dictionary.

   

   *default* = ``False``

.. py:data:: engine.DM.position_refinement (Param, bool)

   If True refine scan positions

   

   *default* = ``Param({})``

.. py:data:: engine.DM.position_refinement.method (str)

   Annealing or GridSearch

   

   *default* = ``'Annealing'``

.. py:data:: engine.DM.position_refinement.start (int)

   Number of iterations until position refinement starts

   If None, position refinement starts at first iteration

   *default* = ``None``

.. py:data:: engine.DM.position_refinement.stop (int)

   Number of iterations after which positon refinement stops

   If None, position refinement stops after last iteration

   *default* = ``None``

.. py:data:: engine.DM.position_refinement.interval (int)

   Frequency of position refinement

   

   *default* = ``1``

.. py:data:: engine.DM.position_refinement.nshifts (int)

   Number of random shifts calculated in each position refinement step (has to be multiple of 4)

   

   *default* = ``4``

.. py:data:: engine.DM.position_refinement.amplitude (float)

   Distance from original position per random shift [m]

   

   *default* = ``1e-06``

.. py:data:: engine.DM.position_refinement.amplitude_decay (bool)

   After each interation, multiply amplitude by factor (stop - iteration) / (stop - start)

   

   *default* = ``True``

.. py:data:: engine.DM.position_refinement.max_shift (float)

   Maximum distance from original position [m]

   

   *default* = ``2e-06``

.. py:data:: engine.DM.position_refinement.metric (str)

   Error metric, can choose between "fourier" and "photon"

   

   *default* = ``'fourier'``

.. py:data:: engine.DM.position_refinement.record (bool)

   record movement of positions

   

   *default* = ``False``

.. py:data:: engine.DM.probe_update_start (int)

   Number of iterations before probe update starts

   

   *default* = ``2 (>0)``

.. py:data:: engine.DM.subpix_start (int)

   Number of iterations before starting subpixel interpolation

   

   *default* = ``0 (>0)``

.. py:data:: engine.DM.subpix (str)

   Subpixel interpolation; 'fourier','linear' or None for no interpolation

   

   *default* = ``'linear'``

.. py:data:: engine.DM.update_object_first (bool)

   If True update object before probe

   

   *default* = ``True``

.. py:data:: engine.DM.overlap_converge_factor (float)

   Threshold for interruption of the inner overlap loop

   The inner overlap loop refines the probe and the object simultaneously. This loop is escaped as soon as the overall change in probe, relative to the first iteration, is less than this value.

   *default* = ``0.05 (>0.0)``

.. py:data:: engine.DM.overlap_max_iterations (int)

   Maximum of iterations for the overlap constraint inner loop

   

   *default* = ``10 (>1)``

.. py:data:: engine.DM.probe_inertia (float)

   Weight of the current probe estimate in the update

   

   *default* = ``1e-09 (>0.0)``

.. py:data:: engine.DM.object_inertia (float)

   Weight of the current object in the update

   

   *default* = ``0.0001 (>0.0)``

.. py:data:: engine.DM.fourier_power_bound (float)

   If rms error of model vs diffraction data is smaller than this value, Fourier constraint is met

   For Poisson-sampled data, the theoretical value for this parameter is 1/4. Set this value higher for noisy data. By default, power bound is calculated using fourier_relax_factor

   *default* = ``None``

.. py:data:: engine.DM.fourier_relax_factor (float)

   A factor used to calculate the Fourier power bound as 0.25 * fourier_relax_factor**2 * maximum power in diffraction data

   Set this value higher for noisy data.

   *default* = ``0.05 (>0.0)``

.. py:data:: engine.DM.obj_smooth_std (float)

   Gaussian smoothing (pixel) of the current object prior to update

   If None, smoothing is deactivated. This smoothing can be used to reduce the amplitude of spurious pixels in the outer, least constrained areas of the object.

   *default* = ``None (>0.0)``

.. py:data:: engine.DM.clip_object (tuple)

   Clip object amplitude into this interval

   

   *default* = ``None``

.. py:data:: engine.DM.probe_center_tol (float)

   Pixel radius around optical axes that the probe mass center must reside in

   

   *default* = ``None (>0.0)``

.. py:data:: engine.DM.compute_log_likelihood (bool)

   A switch for computing the log-likelihood error (this can impact the performance of the engine)

   

   *default* = ``True``

.. py:data:: engine.DM.alpha (float)

   Mix parameter between Difference Map (alpha=1.) and Alternating Projections (alpha=0.)

   

   *default* = ``1.0 (>0.0)``

.. py:data:: engine.DM.name (str)

   

   

   *default* = ``'DM'``


engine.RAAR
-----------

.. py:data:: engine.RAAR (Param)

   

   

   *default* = ``Param({})``

.. py:data:: engine.RAAR.numiter (int)

   Total number of iterations

   For on-the-fly (live) processing, the reconstruction engine will iterate at least this many times after all data has been loaded.

   *default* = ``20 (>1)``

.. py:data:: engine.RAAR.numiter_contiguous (int)

   Number of iterations without interruption

   The engine will not return control to the caller until this number of iterations is completed (not processing server requests, I/O operations, ...).

   *default* = ``1 (>1)``

.. py:data:: engine.RAAR.probe_support (float, NoneType)

   Valid probe area as fraction of the probe frame

   Defines a circular area centered on the probe frame, in which the probe is allowed to be nonzero.

   *default* = ``0.7 (>0.0)``

.. py:data:: engine.RAAR.probe_fourier_support (float, NoneType)

   Valid probe area in frequency domain as fraction of the probe frame

   Defines a circular area centered on the probe frame (in frequency domain), in which the probe is allowed to be nonzero.

   *default* = ``None (>0.0)``

.. py:data:: engine.RAAR.record_local_error (bool)

   If True, save the local map of errors into the runtime dictionary.

   

   *default* = ``False``

.. py:data:: engine.RAAR.position_refinement (Param, bool)

   If True refine scan positions

   

   *default* = ``Param({})``

.. py:data:: engine.RAAR.position_refinement.method (str)

   Annealing or GridSearch

   

   *default* = ``'Annealing'``

.. py:data:: engine.RAAR.position_refinement.start (int)

   Number of iterations until position refinement starts

   If None, position refinement starts at first iteration

   *default* = ``None``

.. py:data:: engine.RAAR.position_refinement.stop (int)

   Number of iterations after which positon refinement stops

   If None, position refinement stops after last iteration

   *default* = ``None``

.. py:data:: engine.RAAR.position_refinement.interval (int)

   Frequency of position refinement

   

   *default* = ``1``

.. py:data:: engine.RAAR.position_refinement.nshifts (int)

   Number of random shifts calculated in each position refinement step (has to be multiple of 4)

   

   *default* = ``4``

.. py:data:: engine.RAAR.position_refinement.amplitude (float)

   Distance from original position per random shift [m]

   

   *default* = ``1e-06``

.. py:data:: engine.RAAR.position_refinement.amplitude_decay (bool)

   After each interation, multiply amplitude by factor (stop - iteration) / (stop - start)

   

   *default* = ``True``

.. py:data:: engine.RAAR.position_refinement.max_shift (float)

   Maximum distance from original position [m]

   

   *default* = ``2e-06``

.. py:data:: engine.RAAR.position_refinement.metric (str)

   Error metric, can choose between "fourier" and "photon"

   

   *default* = ``'fourier'``

.. py:data:: engine.RAAR.position_refinement.record (bool)

   record movement of positions

   

   *default* = ``False``

.. py:data:: engine.RAAR.probe_update_start (int)

   Number of iterations before probe update starts

   

   *default* = ``2 (>0)``

.. py:data:: engine.RAAR.subpix_start (int)

   Number of iterations before starting subpixel interpolation

   

   *default* = ``0 (>0)``

.. py:data:: engine.RAAR.subpix (str)

   Subpixel interpolation; 'fourier','linear' or None for no interpolation

   

   *default* = ``'linear'``

.. py:data:: engine.RAAR.update_object_first (bool)

   If True update object before probe

   

   *default* = ``True``

.. py:data:: engine.RAAR.overlap_converge_factor (float)

   Threshold for interruption of the inner overlap loop

   The inner overlap loop refines the probe and the object simultaneously. This loop is escaped as soon as the overall change in probe, relative to the first iteration, is less than this value.

   *default* = ``0.05 (>0.0)``

.. py:data:: engine.RAAR.overlap_max_iterations (int)

   Maximum of iterations for the overlap constraint inner loop

   

   *default* = ``10 (>1)``

.. py:data:: engine.RAAR.probe_inertia (float)

   Weight of the current probe estimate in the update

   

   *default* = ``1e-09 (>0.0)``

.. py:data:: engine.RAAR.object_inertia (float)

   Weight of the current object in the update

   

   *default* = ``0.0001 (>0.0)``

.. py:data:: engine.RAAR.fourier_power_bound (float)

   If rms error of model vs diffraction data is smaller than this value, Fourier constraint is met

   For Poisson-sampled data, the theoretical value for this parameter is 1/4. Set this value higher for noisy data. By default, power bound is calculated using fourier_relax_factor

   *default* = ``None``

.. py:data:: engine.RAAR.fourier_relax_factor (float)

   A factor used to calculate the Fourier power bound as 0.25 * fourier_relax_factor**2 * maximum power in diffraction data

   Set this value higher for noisy data.

   *default* = ``0.05 (>0.0)``

.. py:data:: engine.RAAR.obj_smooth_std (float)

   Gaussian smoothing (pixel) of the current object prior to update

   If None, smoothing is deactivated. This smoothing can be used to reduce the amplitude of spurious pixels in the outer, least constrained areas of the object.

   *default* = ``None (>0.0)``

.. py:data:: engine.RAAR.clip_object (tuple)

   Clip object amplitude into this interval

   

   *default* = ``None``

.. py:data:: engine.RAAR.probe_center_tol (float)

   Pixel radius around optical axes that the probe mass center must reside in

   

   *default* = ``None (>0.0)``

.. py:data:: engine.RAAR.compute_log_likelihood (bool)

   A switch for computing the log-likelihood error (this can impact the performance of the engine)

   

   *default* = ``True``

.. py:data:: engine.RAAR.beta (float)

   Beta parameter for RAAR algorithm

   

   *default* = ``0.75 (>0.0)``

.. py:data:: engine.RAAR.name (str)

   

   

   *default* = ``'RAAR'``


engine.EPIE
-----------

.. py:data:: engine.EPIE (Param)

   

   

   *default* = ``Param({})``

.. py:data:: engine.EPIE.numiter (int)

   Total number of iterations

   For on-the-fly (live) processing, the reconstruction engine will iterate at least this many times after all data has been loaded.

   *default* = ``20 (>1)``

.. py:data:: engine.EPIE.numiter_contiguous (int)

   Number of iterations without interruption

   The engine will not return control to the caller until this number of iterations is completed (not processing server requests, I/O operations, ...).

   *default* = ``1 (>1)``

.. py:data:: engine.EPIE.probe_support (float, NoneType)

   Valid probe area as fraction of the probe frame

   Defines a circular area centered on the probe frame, in which the probe is allowed to be nonzero.

   *default* = ``0.7 (>0.0)``

.. py:data:: engine.EPIE.probe_fourier_support (float, NoneType)

   Valid probe area in frequency domain as fraction of the probe frame

   Defines a circular area centered on the probe frame (in frequency domain), in which the probe is allowed to be nonzero.

   *default* = ``None (>0.0)``

.. py:data:: engine.EPIE.record_local_error (bool)

   If True, save the local map of errors into the runtime dictionary.

   

   *default* = ``False``

.. py:data:: engine.EPIE.position_refinement (Param, bool)

   If True refine scan positions

   

   *default* = ``Param({})``

.. py:data:: engine.EPIE.position_refinement.method (str)

   Annealing or GridSearch

   

   *default* = ``'Annealing'``

.. py:data:: engine.EPIE.position_refinement.start (int)

   Number of iterations until position refinement starts

   If None, position refinement starts at first iteration

   *default* = ``None``

.. py:data:: engine.EPIE.position_refinement.stop (int)

   Number of iterations after which positon refinement stops

   If None, position refinement stops after last iteration

   *default* = ``None``

.. py:data:: engine.EPIE.position_refinement.interval (int)

   Frequency of position refinement

   

   *default* = ``1``

.. py:data:: engine.EPIE.position_refinement.nshifts (int)

   Number of random shifts calculated in each position refinement step (has to be multiple of 4)

   

   *default* = ``4``

.. py:data:: engine.EPIE.position_refinement.amplitude (float)

   Distance from original position per random shift [m]

   

   *default* = ``1e-06``

.. py:data:: engine.EPIE.position_refinement.amplitude_decay (bool)

   After each interation, multiply amplitude by factor (stop - iteration) / (stop - start)

   

   *default* = ``True``

.. py:data:: engine.EPIE.position_refinement.max_shift (float)

   Maximum distance from original position [m]

   

   *default* = ``2e-06``

.. py:data:: engine.EPIE.position_refinement.metric (str)

   Error metric, can choose between "fourier" and "photon"

   

   *default* = ``'fourier'``

.. py:data:: engine.EPIE.position_refinement.record (bool)

   record movement of positions

   

   *default* = ``False``

.. py:data:: engine.EPIE.probe_update_start (int)

   Number of iterations before probe update starts

   

   *default* = ``0 (>0)``

.. py:data:: engine.EPIE.probe_center_tol (float)

   Pixel radius around optical axes that the probe mass center must reside in

   

   *default* = ``None (>0.0)``

.. py:data:: engine.EPIE.compute_log_likelihood (bool)

   A switch for computing the log-likelihood error (this can impact the performance of the engine)

   

   *default* = ``True``

.. py:data:: engine.EPIE.alpha (float)

   Parameter for adjusting the step size of the object update

   

   *default* = ``1.0 (>0.0)``

.. py:data:: engine.EPIE.beta (float)

   Parameter for adjusting the step size of the probe update

   

   *default* = ``1.0 (>0.0)``

.. py:data:: engine.EPIE.object_norm_is_global (bool)

   Calculate the object norm based on the global object instead of the local object

   

   *default* = ``False``

.. py:data:: engine.EPIE.name (str)

   

   

   *default* = ``'EPIE'``


engine.SDR
----------

.. py:data:: engine.SDR (Param)

   

   

   *default* = ``Param({})``

.. py:data:: engine.SDR.numiter (int)

   Total number of iterations

   For on-the-fly (live) processing, the reconstruction engine will iterate at least this many times after all data has been loaded.

   *default* = ``20 (>1)``

.. py:data:: engine.SDR.numiter_contiguous (int)

   Number of iterations without interruption

   The engine will not return control to the caller until this number of iterations is completed (not processing server requests, I/O operations, ...).

   *default* = ``1 (>1)``

.. py:data:: engine.SDR.probe_support (float, NoneType)

   Valid probe area as fraction of the probe frame

   Defines a circular area centered on the probe frame, in which the probe is allowed to be nonzero.

   *default* = ``0.7 (>0.0)``

.. py:data:: engine.SDR.probe_fourier_support (float, NoneType)

   Valid probe area in frequency domain as fraction of the probe frame

   Defines a circular area centered on the probe frame (in frequency domain), in which the probe is allowed to be nonzero.

   *default* = ``None (>0.0)``

.. py:data:: engine.SDR.record_local_error (bool)

   If True, save the local map of errors into the runtime dictionary.

   

   *default* = ``False``

.. py:data:: engine.SDR.position_refinement (Param, bool)

   If True refine scan positions

   

   *default* = ``Param({})``

.. py:data:: engine.SDR.position_refinement.method (str)

   Annealing or GridSearch

   

   *default* = ``'Annealing'``

.. py:data:: engine.SDR.position_refinement.start (int)

   Number of iterations until position refinement starts

   If None, position refinement starts at first iteration

   *default* = ``None``

.. py:data:: engine.SDR.position_refinement.stop (int)

   Number of iterations after which positon refinement stops

   If None, position refinement stops after last iteration

   *default* = ``None``

.. py:data:: engine.SDR.position_refinement.interval (int)

   Frequency of position refinement

   

   *default* = ``1``

.. py:data:: engine.SDR.position_refinement.nshifts (int)

   Number of random shifts calculated in each position refinement step (has to be multiple of 4)

   

   *default* = ``4``

.. py:data:: engine.SDR.position_refinement.amplitude (float)

   Distance from original position per random shift [m]

   

   *default* = ``1e-06``

.. py:data:: engine.SDR.position_refinement.amplitude_decay (bool)

   After each interation, multiply amplitude by factor (stop - iteration) / (stop - start)

   

   *default* = ``True``

.. py:data:: engine.SDR.position_refinement.max_shift (float)

   Maximum distance from original position [m]

   

   *default* = ``2e-06``

.. py:data:: engine.SDR.position_refinement.metric (str)

   Error metric, can choose between "fourier" and "photon"

   

   *default* = ``'fourier'``

.. py:data:: engine.SDR.position_refinement.record (bool)

   record movement of positions

   

   *default* = ``False``

.. py:data:: engine.SDR.probe_update_start (int)

   Number of iterations before probe update starts

   

   *default* = ``0 (>0)``

.. py:data:: engine.SDR.probe_center_tol (float)

   Pixel radius around optical axes that the probe mass center must reside in

   

   *default* = ``None (>0.0)``

.. py:data:: engine.SDR.compute_log_likelihood (bool)

   A switch for computing the log-likelihood error (this can impact the performance of the engine)

   

   *default* = ``True``

.. py:data:: engine.SDR.sigma (float)

   Relaxed Fourier reflection parameter.

   

   *default* = ``1 (>0.0)``

.. py:data:: engine.SDR.tau (float)

   Relaxed modulus constraint parameter.

   

   *default* = ``1 (>0.0)``

.. py:data:: engine.SDR.beta_probe (float)

   Parameter for adjusting the step size of the probe update

   

   *default* = ``0.1 (>0.0)``

.. py:data:: engine.SDR.beta_object (float)

   Parameter for adjusting the step size of the object update

   

   *default* = ``0.9 (>0.0)``

.. py:data:: engine.SDR.name (str)

   

   

   *default* = ``'SDR'``


engine.ML
---------

.. py:data:: engine.ML (Param)

   

   

   *default* = ``Param({})``

.. py:data:: engine.ML.numiter (int)

   Total number of iterations

   For on-the-fly (live) processing, the reconstruction engine will iterate at least this many times after all data has been loaded.

   *default* = ``20 (>1)``

.. py:data:: engine.ML.numiter_contiguous (int)

   Number of iterations without interruption

   The engine will not return control to the caller until this number of iterations is completed (not processing server requests, I/O operations, ...).

   *default* = ``1 (>1)``

.. py:data:: engine.ML.probe_support (float, NoneType)

   Valid probe area as fraction of the probe frame

   Defines a circular area centered on the probe frame, in which the probe is allowed to be nonzero.

   *default* = ``0.7 (>0.0)``

.. py:data:: engine.ML.probe_fourier_support (float, NoneType)

   Valid probe area in frequency domain as fraction of the probe frame

   Defines a circular area centered on the probe frame (in frequency domain), in which the probe is allowed to be nonzero.

   *default* = ``None (>0.0)``

.. py:data:: engine.ML.record_local_error (bool)

   If True, save the local map of errors into the runtime dictionary.

   

   *default* = ``False``

.. py:data:: engine.ML.position_refinement (Param, bool)

   If True refine scan positions

   

   *default* = ``Param({})``

.. py:data:: engine.ML.position_refinement.method (str)

   Annealing or GridSearch

   

   *default* = ``'Annealing'``

.. py:data:: engine.ML.position_refinement.start (int)

   Number of iterations until position refinement starts

   If None, position refinement starts at first iteration

   *default* = ``None``

.. py:data:: engine.ML.position_refinement.stop (int)

   Number of iterations after which positon refinement stops

   If None, position refinement stops after last iteration

   *default* = ``None``

.. py:data:: engine.ML.position_refinement.interval (int)

   Frequency of position refinement

   

   *default* = ``1``

.. py:data:: engine.ML.position_refinement.nshifts (int)

   Number of random shifts calculated in each position refinement step (has to be multiple of 4)

   

   *default* = ``4``

.. py:data:: engine.ML.position_refinement.amplitude (float)

   Distance from original position per random shift [m]

   

   *default* = ``1e-06``

.. py:data:: engine.ML.position_refinement.amplitude_decay (bool)

   After each interation, multiply amplitude by factor (stop - iteration) / (stop - start)

   

   *default* = ``True``

.. py:data:: engine.ML.position_refinement.max_shift (float)

   Maximum distance from original position [m]

   

   *default* = ``2e-06``

.. py:data:: engine.ML.position_refinement.metric (str)

   Error metric, can choose between "fourier" and "photon"

   

   *default* = ``'fourier'``

.. py:data:: engine.ML.position_refinement.record (bool)

   record movement of positions

   

   *default* = ``False``

.. py:data:: engine.ML.name (str)

   

   

   *default* = ``'ML'``

.. py:data:: engine.ML.ML_type (str)

   Likelihood model

   One of ‘gaussian’, poisson’ or ‘euclid’.

   *default* = ``'gaussian'``

.. py:data:: engine.ML.floating_intensities (bool)

   Adaptive diffraction pattern rescaling

   If True, allow for adaptative rescaling of the diffraction pattern intensities (to correct for incident beam intensity fluctuations).

   *default* = ``False``

.. py:data:: engine.ML.intensity_renormalization (float)

   Rescales the intensities so they can be interpreted as Poisson counts.

   

   *default* = ``1.0 (>0.0)``

.. py:data:: engine.ML.reg_del2 (bool)

   Whether to use a Gaussian prior (smoothing) regularizer

   

   *default* = ``False``

.. py:data:: engine.ML.reg_del2_amplitude (float)

   Amplitude of the Gaussian prior if used

   

   *default* = ``0.01 (>0.0)``

.. py:data:: engine.ML.smooth_gradient (float)

   Smoothing preconditioner

   Sigma for gaussian filter (turned off if 0.)

   *default* = ``0.0``

.. py:data:: engine.ML.smooth_gradient_decay (float)

   Decay rate for smoothing preconditioner

   Sigma for gaussian filter will reduce exponentially at this rate

   *default* = ``0.0``

.. py:data:: engine.ML.scale_precond (bool)

   Whether to use the object/probe scaling preconditioner

   This parameter can give faster convergence for weakly scattering samples.

   *default* = ``False``

.. py:data:: engine.ML.scale_probe_object (float)

   Relative scale of probe to object

   

   *default* = ``1.0 (>0.0)``

.. py:data:: engine.ML.probe_update_start (int)

   Number of iterations before probe update starts

   

   *default* = ``2 (>0)``

.. py:data:: engine.ML.poly_line_coeffs (str)

   How many coefficients to be used in the the linesearch

   choose between the 'quadratic' approximation (default) or 'all'

   *default* = ``'quadratic'``


engine.DM_3dBragg
-----------------

.. py:data:: engine.DM_3dBragg (Param)

   

   

   *default* = ``Param({})``

.. py:data:: engine.DM_3dBragg.numiter (int)

   Total number of iterations

   For on-the-fly (live) processing, the reconstruction engine will iterate at least this many times after all data has been loaded.

   *default* = ``20 (>1)``

.. py:data:: engine.DM_3dBragg.numiter_contiguous (int)

   Number of iterations without interruption

   The engine will not return control to the caller until this number of iterations is completed (not processing server requests, I/O operations, ...).

   *default* = ``1 (>1)``

.. py:data:: engine.DM_3dBragg.probe_support (float, NoneType)

   Valid probe area as fraction of the probe frame

   Defines a circular area centered on the probe frame, in which the probe is allowed to be nonzero.

   *default* = ``0.7 (>0.0)``

.. py:data:: engine.DM_3dBragg.probe_fourier_support (float, NoneType)

   Valid probe area in frequency domain as fraction of the probe frame

   Defines a circular area centered on the probe frame (in frequency domain), in which the probe is allowed to be nonzero.

   *default* = ``None (>0.0)``

.. py:data:: engine.DM_3dBragg.record_local_error (bool)

   If True, save the local map of errors into the runtime dictionary.

   

   *default* = ``False``

.. py:data:: engine.DM_3dBragg.position_refinement (Param, bool)

   If True refine scan positions

   

   *default* = ``Param({})``

.. py:data:: engine.DM_3dBragg.position_refinement.method (str)

   Annealing or GridSearch

   

   *default* = ``'Annealing'``

.. py:data:: engine.DM_3dBragg.position_refinement.start (int)

   Number of iterations until position refinement starts

   If None, position refinement starts at first iteration

   *default* = ``None``

.. py:data:: engine.DM_3dBragg.position_refinement.stop (int)

   Number of iterations after which positon refinement stops

   If None, position refinement stops after last iteration

   *default* = ``None``

.. py:data:: engine.DM_3dBragg.position_refinement.interval (int)

   Frequency of position refinement

   

   *default* = ``1``

.. py:data:: engine.DM_3dBragg.position_refinement.nshifts (int)

   Number of random shifts calculated in each position refinement step (has to be multiple of 4)

   

   *default* = ``4``

.. py:data:: engine.DM_3dBragg.position_refinement.amplitude (float)

   Distance from original position per random shift [m]

   

   *default* = ``1e-06``

.. py:data:: engine.DM_3dBragg.position_refinement.amplitude_decay (bool)

   After each interation, multiply amplitude by factor (stop - iteration) / (stop - start)

   

   *default* = ``True``

.. py:data:: engine.DM_3dBragg.position_refinement.max_shift (float)

   Maximum distance from original position [m]

   

   *default* = ``2e-06``

.. py:data:: engine.DM_3dBragg.position_refinement.metric (str)

   Error metric, can choose between "fourier" and "photon"

   

   *default* = ``'fourier'``

.. py:data:: engine.DM_3dBragg.position_refinement.record (bool)

   record movement of positions

   

   *default* = ``False``

.. py:data:: engine.DM_3dBragg.probe_update_start (int)

   Number of iterations before probe update starts

   

   *default* = ``2 (>0)``

.. py:data:: engine.DM_3dBragg.subpix_start (int)

   Number of iterations before starting subpixel interpolation

   

   *default* = ``0 (>0)``

.. py:data:: engine.DM_3dBragg.subpix (str)

   Subpixel interpolation; 'fourier','linear' or None for no interpolation

   

   *default* = ``'linear'``

.. py:data:: engine.DM_3dBragg.update_object_first (bool)

   If True update object before probe

   

   *default* = ``True``

.. py:data:: engine.DM_3dBragg.overlap_converge_factor (float)

   Threshold for interruption of the inner overlap loop

   The inner overlap loop refines the probe and the object simultaneously. This loop is escaped as soon as the overall change in probe, relative to the first iteration, is less than this value.

   *default* = ``0.05 (>0.0)``

.. py:data:: engine.DM_3dBragg.overlap_max_iterations (int)

   Maximum of iterations for the overlap constraint inner loop

   

   *default* = ``10 (>1)``

.. py:data:: engine.DM_3dBragg.probe_inertia (float)

   Weight of the current probe estimate in the update

   

   *default* = ``1e-09 (>0.0)``

.. py:data:: engine.DM_3dBragg.object_inertia (float)

   Weight of the current object in the update

   

   *default* = ``0.0001 (>0.0)``

.. py:data:: engine.DM_3dBragg.fourier_power_bound (float)

   If rms error of model vs diffraction data is smaller than this value, Fourier constraint is met

   For Poisson-sampled data, the theoretical value for this parameter is 1/4. Set this value higher for noisy data. By default, power bound is calculated using fourier_relax_factor

   *default* = ``None``

.. py:data:: engine.DM_3dBragg.fourier_relax_factor (float)

   A factor used to calculate the Fourier power bound as 0.25 * fourier_relax_factor**2 * maximum power in diffraction data

   Set this value higher for noisy data.

   *default* = ``0.05 (>0.0)``

.. py:data:: engine.DM_3dBragg.obj_smooth_std (float)

   Gaussian smoothing (pixel) of the current object prior to update

   If None, smoothing is deactivated. This smoothing can be used to reduce the amplitude of spurious pixels in the outer, least constrained areas of the object.

   *default* = ``None (>0.0)``

.. py:data:: engine.DM_3dBragg.clip_object (tuple)

   Clip object amplitude into this interval

   

   *default* = ``None``

.. py:data:: engine.DM_3dBragg.probe_center_tol (float)

   Pixel radius around optical axes that the probe mass center must reside in

   

   *default* = ``None (>0.0)``

.. py:data:: engine.DM_3dBragg.compute_log_likelihood (bool)

   A switch for computing the log-likelihood error (this can impact the performance of the engine)

   

   *default* = ``True``

.. py:data:: engine.DM_3dBragg.alpha (float)

   Mix parameter between Difference Map (alpha=1.) and Alternating Projections (alpha=0.)

   

   *default* = ``1.0 (>0.0)``

.. py:data:: engine.DM_3dBragg.name (str)

   

   

   *default* = ``'DM_3dBragg'``

.. py:data:: engine.DM_3dBragg.sample_support (Param)

   Sample support settings

   

   *default* = ``Param({})``

.. py:data:: engine.DM_3dBragg.sample_support.type (str)

   Sample support geometry

   Options are 'thinlayer' for one-dimensional support as
   function of z, 'rod' for one-dimensional radial support around
   the z axis.

   *default* = ``'thinlayer'``

.. py:data:: engine.DM_3dBragg.sample_support.size (float)

   Support thickness or radius

   This parameter is ignored when shrink wrapping is used.

   *default* = ``2e-07``

.. py:data:: engine.DM_3dBragg.sample_support.coefficient (float)

   Scaling of region outside the support

   Sample amplitude is multiplied by this value outside the support region

   *default* = ``0.1 (>0.0, <1.0)``

.. py:data:: engine.DM_3dBragg.sample_support.shrinkwrap (Param)

   Shrink wrap settings. None for no shrink wrap.

   

   *default* = ``Param({})``

.. py:data:: engine.DM_3dBragg.sample_support.shrinkwrap.smooth (float)

   Shrink wrap smoothing parameter in pixels

   Sigma of gaussian with which to smooth object profile before applying shrink wrap. Pass None for no smoothing. Values < .3 make little sense.

   *default* = ``1.0 (>0.3)``

.. py:data:: engine.DM_3dBragg.sample_support.shrinkwrap.cutoff (float)

   Shrink wrap cutoff parameter

   The support is truncated where the object profile has decayed to this value relative to the maximum.

   *default* = ``0.5``

.. py:data:: engine.DM_3dBragg.sample_support.shrinkwrap.monotonic (bool)

   Require the object profile to be monotonic

   If the object profile increases again after the maximum, then the support is cut off. Set the cutoff parameter low to make this the dominating criterion.

   *default* = ``True``

.. py:data:: engine.DM_3dBragg.sample_support.shrinkwrap.start (int)

   Start shrink wrap after this iteration

   

   *default* = ``10``

.. py:data:: engine.DM_3dBragg.sample_support.shrinkwrap.plot (bool)

   Pass shrink wrap information to the plot client

   Puts shrink wrap information in the runtime dict. The plot client can choose to plot it if it likes.

   *default* = ``False``


ptycho
======

.. py:data:: ptycho (Param)

   

   

   *default* = ``Param({})``

.. py:data:: ptycho.verbose_level (str, int)

   Verbosity level

   Verbosity level for information logging.
   - ``CRITICAL``: Only critical errors
   - ``ERROR``:    All errors
   - ``WARNING``:  Warning
   - ``INFO``:     Process Information
   - ``INSPECT``:  Object Information
   - ``DEBUG``:    Debug

   *default* = ``'ERROR'``

.. py:data:: ptycho.data_type (str)

   Reconstruction floating number precision

   Reconstruction floating number precision (``'single'`` or
   ``'double'``)

   *default* = ``'single'``

.. py:data:: ptycho.run (str)

   Reconstruction identifier

   Reconstruction run identifier. If ``None``, the run name will
   be constructed at run time from other information.

   *default* = ``None``

.. py:data:: ptycho.frames_per_block (int)

   Max number of frames per block of data

   This parameter determines the size of buffer arrays for GPUs.
   Reduce this number if you run out of memory on the GPU.

   *default* = ``100000 (>1)``

.. py:data:: ptycho.min_frames_for_recon (int)

   Minimum number of frames to be loaded before reconstruction can start.

   For on-the-fly (live) processing, the first reconstruction engine will wait until this many frames have been loaded.

   *default* = ``0``

.. py:data:: ptycho.dry_run (bool)

   Dry run switch

   Run everything skipping all memory and cpu-heavy steps (and
   file saving). **NOT IMPLEMENTED**

   *default* = ``False``

.. py:data:: ptycho.ipython_kernel (bool)

   Start an ipython kernel for debugging

   Start an ipython kernel for debugging.

   *default* = ``False``


ptycho.io
---------

.. py:data:: ptycho.io (Param)

   Global parameters for I/O

   Global parameter container for I/O settings.

   *default* = ``Param({})``

.. py:data:: ptycho.io.home (str)

   Base directory for all I/O

   home is the root directory for all input/output operations. All other path parameters that
   are relative paths will be relative to this directory.

   *default* = ``'./'``

.. py:data:: ptycho.io.rfile (str)

   Reconstruction file name (or format string)

   Reconstruction file name or format string (constructed against runtime dictionary)

   *default* = ``'recons/%(run)s/%(run)s_%(engine)s_%(iterations)04d.ptyr'``

.. py:data:: ptycho.io.rformat (str)

   Reconstruction file format

   Choose a reconstruction file format for after engine completion.
   - ``'minimal'``: Bare minimum of information
   - ``'dls'``:    Custom format for Diamond Light Source
   - ``'used_params'``: Same as minimal but including all used parameters

   *default* = ``'minimal'``

.. py:data:: ptycho.io.interaction (Param)

   ZeroMQ interactor options

   Options for the communications server

   *default* = ``Param({})``

.. py:data:: ptycho.io.interaction.active (bool)

   turns on the interaction

   If True the interaction starts, if False all interaction is turned off

   *default* = ``True``

.. py:data:: ptycho.io.interaction.server (Param)

   Link to server parameter tree

   

   *default* = :py:data:`io.interaction.server`

.. py:data:: ptycho.io.interaction.client (Param)

   Link to client parameter tree

   

   *default* = :py:data:`io.interaction.client`

.. py:data:: ptycho.io.autosave (Param)

   Auto-save options

   Options for automatic saving during reconstruction.

   *default* = ``Param({})``

.. py:data:: ptycho.io.autosave.active (bool)

   Activation switch

   If ``True`` the current reconstruction will be saved at regular intervals.

   *default* = ``True``

.. py:data:: ptycho.io.autosave.interval (int)

   Auto-save interval

   If ``>0`` the current reconstruction will be saved at regular intervals according to the

   *default* = ``10 (>-1)``

.. py:data:: ptycho.io.autosave.rfile (str)

   Auto-save file name (or format string)

   Auto-save file name or format string (constructed against runtime dictionary)

   *default* = ``'dumps/%(run)s/%(run)s_%(engine)s_%(iterations)04d.ptyr'``

.. py:data:: ptycho.io.autoplot (Param)

   Plotting client parameters

   Container for the plotting.

   *default* = ``Param({})``

.. py:data:: ptycho.io.autoplot.active (bool)

   Activation switch

   If ``True`` the current reconstruction will be plotted at regular intervals.

   *default* = ``True``

.. py:data:: ptycho.io.autoplot.imfile (str)

   Plot images file name (or format string)

   Plot images file name (or format string).

   *default* = ``'plots/%(run)s/%(run)s_%(engine)s_%(iterations)04d.png'``

.. py:data:: ptycho.io.autoplot.interval (int)

   Number of iterations between plot updates

   Requests to the server will happen with this iteration intervals. Note that this will work
   only if interaction.polling_interval is smaller or equal to this number. If ``interval
   =0`` plotting is disabled which should be used, when ptypy is run on a cluster.

   *default* = ``1 (>-1)``

.. py:data:: ptycho.io.autoplot.threaded (bool)

   Live plotting switch

   If ``True``, a plotting client will be spawned in a new thread and connected at
   initialization. If ``False``, the master node will carry out the plotting, pausing the
   reconstruction. This option should be set to ``True`` when ptypy is run on an isolated
   workstation.

   *default* = ``True``

.. py:data:: ptycho.io.autoplot.layout (str)

   Options for default plotter or template name

   Flexible layout for default plotter is not implemented yet. Please choose one of the
   templates ``'default'``,``'black_and_white'``,``'nearfield'``, ``'minimal'`` or ``'weak'``

   *default* = ``'default'``

.. py:data:: ptycho.io.autoplot.dump (bool)

   Switch to dump plots as image files

   Switch to dump plots as image files during reconstruction.

   *default* = ``False``

.. py:data:: ptycho.io.autoplot.make_movie (bool)

   Produce reconstruction movie after the reconstruction.

   Switch to request the production of a movie from the dumped plots at the end of the
   reconstruction.

   *default* = ``False``

.. py:data:: ptycho.io.benchmark (str)

   Produce timings for benchmarking the performance of data loaders and engines

   Switch to get timings and save results to a json file in p.io.home
   Choose ``'all'`` for timing data loading, engine_init, engine_prepare, engine_iterate and engine_finalize

   *default* = ``None``


ptycho.scans
------------

.. py:data:: ptycho.scans (Param)

   Container for instances of scan parameters

   

   *default* = ``Param({})``

.. py:data:: ptycho.scans.scan_00 (Param)

   *Wildcard*: multiple entries with arbitrary names are accepted.

   Wildcard entry for list of scans to load. See :py:data:`scan`

   

   *default* = :py:data:`scan.ScanModel`


ptycho.engines
--------------

.. py:data:: ptycho.engines (Param)

   Container for instances of engine parameters

   

   *default* = ``Param({})``

.. py:data:: ptycho.engines.engine_00 (Param)

   *Wildcard*: multiple entries with arbitrary names are accepted.

   Wildcard entry for list of engines to run. See :py:data:`engine`

   The value of engines.*.name is used to choose among the available engines.

   *default* = :py:data:`engine.DM`

